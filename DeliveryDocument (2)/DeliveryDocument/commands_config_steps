SHARE FOLDER 
URL:https://sbionline-my.sharepoint.com/personal/rishabh_gupta_sbi_co_in/_layouts/15/onedrive.aspx#e=5%3a58e62336e11c4fe3b1a2a9a0bde981cc&at=9&id=%2fpersonal%2frishabh_gupta_sbi_co_in%2fDocuments%2fDevOps_Repository&FolderCTID=0x012000E237F1E536641045B1160F735AD38602


MINK URL:
https://mink.techmahindra.com/sites/SBUINDIA/IBU%20BFSI/Forms/AllItems.aspx?RootFolder=%2Fsites%2FSBUINDIA%2FIBU%20BFSI%2FProjects%2FSBI%20Bank%2FSBI%20%2D%20DEVOPS&FolderCTID=0x01200087155F6413CFF3478CFFD077138A69D0&View=%7B264CBC91-E71D-484A-A924-A07D65939FB7%7D#InplviewHash264cbc91-e71d-484a-a924-a07d65939fb7=RootFolder%3D%252Fsites%252FSBUINDIA%252FIBU%2520BFSI%252FProjects%252FSBI%2520Bank%252FSBI%2520%252D%2520DEVOPS


https://mink.techmahindra.com/sites/SBUINDIA/IBU%20BFSI/Forms/AllItems.aspx?RootFolder=%2Fsites%2FSBUINDIA%2FIBU%20BFSI%2FProjects%2FSBI%20Bank%2FSBI%20%2D%20DEVOPS&FolderCTID=0x01200087155F6413CFF3478CFFD077138A69D0&View=%7B264CBC91-E71D-484A-A924-A07D65939FB7%7D#InplviewHash264cbc91-e71d-484a-a924-a07d65939fb7=RootFolder%3D%252Fsites%252FSBUINDIA%252FIBU%2520BFSI%252FProjects%252FSBI%2520Bank%252FSBI%2520%252D%2520DEVOPS

sudo chmod a+x atlassian-jira-software-8.5.9-x64.bin

****************************
JIRA
****************************
sudo systemctl daemon-reload
Start JIRA:

sudo systemctl start jira

If you want to start JIRA automatically when OS starts:

sudo systemctl enable jira

due to some reson if jira services kill but not removed from below path
catalina.pid
/opt/atlassian/jira/work/ directory and delete catalina.pid file. ( Due to some strange reason, the pid proces was killed but file not removed)

Enable ssl in jira.
url: https://confluence.atlassian.com/display/JIRA044/Running+JIRA+over+SSL+or+HTTPS#RunningJIRAoverSSLorHTTPS-ImportCertificateIntoTheTruststore

jira database connectivity
/var/atlassian/application-data/jira/dbconfig.xml


jira log:

/opt/atlassian/jira/bin/atlassian-jira.log
/var/atlassian/application-data/jira/log/atlassian-jira.log

change db passowrd in postgresql:

ALTER USER user_name WITH PASSWORD 'new_password';




ps auxw | grep postgres | grep -- -D

yum remove *postgres*


https://forums.centos.org/viewtopic.php?t=32438

https://www.youtube.com/watch?v=Ovoy8w0m-Lg

/var/lib/pgsql/9.6/data/postgresql.conf
------------
postgres install offline:-
sudo rpm -ivh pgdg-redhat-repo-latest.noarch.rpm
sudo yum install postgresql96 postgresql96-server postgresql96-contrib postgresql96-libs -y
sudo /usr/pgsql-9.6/bin/postgresql96-setup initdb
-------------
uname -r
lscpu
yum repoinfo





vi /etc/ssh/sshd_config			==> Connection timeout
ClientAliveInterval 60				==> Connection timeout
sudo systemctl restart sshd.service	==> Connection timeout

cat /etc/passwd
rpm -qpR <rpm file name>		==> to check RPM dependency
rpm -ivh jdk-8u271-linux-x64.rpm
rpm -qa jdk1*
alternatives --config java
find / -name java*
chown -R root:appadmin demoapp1-7.9
ps -ef | grep -i sonar

remove java command:
yum remove java "11.0.9"



Java find command:
rpm -qa | grep java

 fdisk -l
 df -h
 
EPM URL:  https://pmepminhouseapp.corp.ad.sbi:8443/epmservice/

Jira services:

[Unit]
Documentation=man:systemd-sysv-generator(8)
SourcePath=/etc/rc.d/init.d/jenkins
Description=LSB: Jenkins Automation Server
Before=runlevel2.target
Before=runlevel3.target
Before=runlevel4.target
Before=runlevel5.target
Before=shutdown.target
After=remote-fs.target
After=network-online.target
After=time-sync.target
After=nss-lookup.target
After=time-sync.target
After=sendmail.service
After=network-online.target
After=splunk.service
Wants=network-online.target
Conflicts=shutdown.target

[Service]
Type=forking
Restart=no
TimeoutSec=5min
IgnoreSIGPIPE=no
KillMode=process
GuessMainPID=no
RemainAfterExit=yes
ExecStart=/etc/rc.d/init.d/jenkins start
ExecStop=/etc/rc.d/init.d/jenkins stop
ExecReload=/etc/rc.d/init.d/jenkins reload


***********************************************************
Start Jenkins
***********************************************************
You can start the Jenkins service with the command:

sudo systemctl start jenkins

You can check the status of the Jenkins service using the command:

sudo systemctl status jenkins
sudo systemctl restart jenkins
sudo /etc/init.d/jenkins restart
sudo /etc/init.d/jenkins reload

Copy pdf from one server to other server using execute shel script through jenkins:

BIRTReportGenerator -template "Developer Workbook" -source /opt/Jenkins/workspace/ADOPT_FORTIFY_UPDATED/FORTIFY_ADOPT.fpr -format PDF -showSuppressed -output /opt/Jenkins/workspace/ADOPT_FORTIFY_UPDATED/FORTIFY_ADOPT.pdf


whoami
scp root@10.189.42.241:/opt/Jenkins/workspace/ADOPT_FORTIFY_UPDATED/FORTIFY_ADOPT.pdf /var/lib/jenkins/workspace/pdf
#chmod 664 /tmp/pdf/FORTIFY_ADOPT.pdf
scp -r /var/lib/jenkins/workspace/pdf/FORTIFY_ADOPT.pdf jenkins@10.191.151.121:/opt/tomcat/webapps/manager/displayfile






If everything has been set up correctly, you should see an output like this:

Loaded: loaded (/etc/rc.d/init.d/jenkins; generated)
Active: active (running) since Tue 2018-11-13 16:19:01 +03; 4min 57s ago

[root@ETADEVOPSAPP02DEV ~]# ps -ef |grep -i jenkins
jenkins   1570     1  0 11:36 ?        00:00:23 /etc/alternatives/java -Dcom.sun.akuma.Daemon=daemonized -Djava.awt.headless=true -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --daemon --httpPort=8080 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20
root     10816 10195  0 14:36 pts/0    00:00:00 grep --color=auto -i jenkins
[root@ETADEVOPSAPP02DEV ~]# cd /usr/lib

cd /var/lib/jenkins

/etc/default/jenkins
/etc/sysconfig/jenkins
/etc/rc.d/init.d/jenkins
/etc/logrotate.d/jenkins
/run/lock/subsys/jenkins
/usr/lib/jenkins
/var/log/jenkins
/var/cache/jenkins
/var/lib/jenkins

/var/lib/jenkins/plugins  : plugins are there
  


if jenkis is not getting up after gitlab wrong configuration kindly do the below step if admin paaswod is locked also do the same steps

first of all stop the jenkins

step1:
vim /var/lib/jenkins/config.xml
<useSecurity>true</useSecurity>`

Set the value to `false`

step2: Start Jenkins

step3: If you don’t know your admin password when using Jenkins’ own user database for your Security Realm, go to:

JENKINS_URL/user/admin/configure
to set the new `admin` password.

step4:
Now go to Manage Jenkins -> Configure Global Security and choose your Security Realm and Authorization settings to re-enable security.

Note: an alternative to step 2 is to restore a known good configuration of JENKINS_HOME/config.xml from a backup that was taken immediately before the Configure Global Security changes were done that caused the issue. We recommmend you do a diff of the current content of JENKINS_HOME/config.xml and the version from the backup before you replace it, to ensure you understand what you are reverting.




**********************************************************************
CHANGE TOMCAT PORT *****************************
vi [TOMCAT INSTALL DIR]/conf/server.xml
Find the below content in configuration file

    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
Replace port 8080 with your required port. For example we are changing the default tomcat port with 8081.

    <Connector port="8081" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />

Start Tomcat using tomcat user
UnserName:tomcat
pass:tomcat

 sudo sh startup.sh start

To access tomcat GUI do the below configuration
vim /opt/tomcat/conf/​tomcat-users.xml
<role rolename="manager-script"/>
<role rolename="manager-gui"/>
<user username="tomcat" password="tomcat123" roles="manager-script"/>
<user username="tomcat2" password="tomcat123" roles="manager-gui"/>




step2:remove below entry form 
vim /opt/tomcat/webapps/manager/META-INF/context.xml
<Valve className="org.apache.catalina.valves.RemoteAddrValve"
         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" />


***************CHANGE JENKINS PORT******************************************************************


/etc/sysconfig/jenkins: change http port 
/etc/rc.d/init.d/jenkins
/etc/logrotate.d/jenkins
/run/lock/subsys/jenkins
/usr/lib/jenkins
/var/log/jenkins
/var/cache/jenkins
/var/lib/jenkins



/etc/sysconfig/jenkins: change http port 

/usr/lib/firewalld/services 
jenkins.xml 
change port 
<?xml version="1.0" encoding="utf-8"?>
<service>
  <short>jenkins</short>
  <description>Jenkins is an open source automation server written in Java.</description>
  <port protocol="tcp" port="8081"/>
</service>


Step:3 Start and Enable Jenkins Service

[root@jenkins ~]# systemctl start jenkins
[root@jenkins ~]# systemctl enable jenkins


Admin Passwordk:e28f7665be5942a2b66517df1b5b9c70
User:admin
Pass:admin

cat /etc/sysconfig/jenkins | grep JENKINS_USER

Step:4 Open the ports (80 and 8080) in OS firewall.

[root@jenkins ~]# firewall-cmd --zone=public --add-port=8080/tcp --permanent
success
[root@jenkins ~]# firewall-cmd --zone=public --add-service=http --permanent
success
[root@jenkins ~]# firewall-cmd --reload
success
[root@jenkins ~]#

Starting, stopping, and restarting Jenkins on Red Hat Linux
Here are the commands to start, stop, restart, and check the status of the Jenkins service:

To start Jenkins, use the following command:
        sudo systemctl start jenkins 
Similarly, to stop Jenkins, use the following command:
        sudo systemctl stop jenkins 
To restart Jenkins, use the following command:
        sudo systemctl restart jenkins 
To check the status of the Jenkins service, use the following systemctl command:
        sudo systemctl status jenkins  
You should see the following output:
        ● jenkins.service - LSB: Jenkins Automation Server 
          Loaded: loaded (/etc/rc.d/init.d/jenkins; bad;          vendor preset: disabled) 
   

   Active: active (running) since Wed 2017-07-19 18:45:47 EDT; 2min 
You can go to /etc/default/jenkins  

add --httpPort=9999 or whatever port to JENKINS_ARGS.

Then you should restart Jenkins with sudo service jenkins restart.


JENKINS.XML PATH:

/usr/lib/firewalld/services
		  
		  JENKINS_HOME="/var/lib/jenkins"
		  $JENKINS_HOME and /var/log/jenkins.

Jenkins Admin Password: e28f7665be5942a2b66517df1b5b9c70

POSTGRES database details;
postgres=# \c test
You are now connected to database "test" as user "postgres".
test=#
test=# \l
 jiradb      | postgres | UTF8     | C           | C           | =Tc/postgres           +
             |          |          |             |             | postgres=CTc/postgres  +
             |          |          |             |             | jiradbuser=CTc/postgres
 postgres    | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 demoapp1db | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/postgres           +
             |          |          |             |             | postgres=CTc/postgres  +
             |          |          |             |             | demoapp1=CTc/postgres
 template0   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres            +
             |          |          |             |             | postgres=CTc/postgres
 template1   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres            +
             |          |          |             |             | postgres=CTc/postgres
 test        | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |


###How to kill the particular port which is running on background:
kill $(lsof -t -i:8081)

Postgresql psql path:
/usr/bin/psql

Port information is given there:
/var/lib/pgsql/9.6/data/postgresql.conf
listen_addresses = '*'
port = 4000

Finally I found it, the service file is /lib/systemd/system/postgresql.service, I just change the following line.

Environment=PGPORT=9898
stop the service as

service postgresql stop
then reload the daemon services using this

systemctl daemon-reload
Finally start the postgresql using

service postgresql start


Stop postgressql services:
/bin/systemctl start  postgresql-9.6.service
/bin/systemctl stop  postgresql-9.6.service


###########change port##########of postgres#########
vi /var/lib/pgsql/9.6/data/postgresql.conf
cd /lib/systemd/system/postgresql.service

Environment=PGPORT=5454

/var/run/postgresql

To connect ot loacal throgh pg admin:
/var/lib/pgsql/9.6/data pg_hba.conf
put loact system details over here and restart postgres services
host    all             all             127.0.0.1/32            ident
host    all             all             10.191.213.54/24        trust
host    all             all             10.191.151.102/24       trust
host    all             all             10.191.151.100/24       trust
host    all             all             10.191.151.95/24        trust
host    all             all             10.191.151.101/24       trust
host    all             all             10.191.151.121/24       trust

. Log in to Postgres SQL server with the use of ssh console.

2. cd to /var/lib/pgsql/9.6/data/.



3. Open pg_hba.conf file in an editor.

4. Add an entry of the host IP address from which you try to connect. You can input the entry of the host which you would like to provide access to as shown in the image.



5. Restart the postgres SQL server.

systemctl restart postgresql-9.6.service


****************************************************
TO CHECK ORACLE IS RUNNING OR NOT 
 ps -ef |grep pmon

 
GITHUB LOGIN
Abhishek-alt-tech
abhi746541@gmail.com
sameasoraclejdkpassword






[root@ETADEVOPSDB01DEV ~]# su - oracle
Last login: Fri Nov 27 11:44:38 IST 2020 on pts/0
Last failed login: Fri Nov 27 11:46:28 IST 2020 on pts/0
There was 1 failed login attempt since the last successful login.
[oracle@ETADEVOPSDB01DEV ~]$ sqlplus
-bash: sqlplus: command not found
[oracle@ETADEVOPSDB01DEV ~]$ . oraenv a
ORACLE_SID = [oracle] ? orcl
The Oracle base has been set to /oracle/orabase
[oracle@ETADEVOPSDB01DEV ~]$ sqlplus

SQL*Plus: Release 18.0.0.0.0 - Production on Fri Nov 27 14:17:19 2020
Version 18.3.0.0.0

Copyright (c) 1982, 2018, Oracle.  All rights reserved.

Enter user-name: sys@orcl as sysdba
Enter password:
ERROR:
ORA-12541: TNS:no listener

gitlab:
to check gitlab information
gitlab-rake gitlab:env:info 

systemctl start sshd
systemctl start postfix

Now enable them to run automatically at the boot time.

systemctl enable sshd
systemctl enable postfix

For this tutorial, we will use a domain name for gitlab. Specifically, we will use the domain name 'demoapp1.hakase-labs.co.'

Go to the gitlab configuration directory '/etc/demoapp1' and then edit the configuration file 'demoapp1.rb' with vim editor.

vi /var/opt/demoapp1/nginx/conf/demoapp1-http.conf
edit the file in centos or linux:- /var/opt/demoapp1/nginx/conf/demoapp1-http.conf



select 'DROP TABLE "' || TABLE_NAME || '" CASCADE CONSTRAINTS;' FROM user_tables;



oracle preprod credential
10.191.213.53
username:orasbi
password: orasbi
SIB: devopsdb

find database name in oracle:
select name from V$database;

 
*********************************CORRECT STEP 
GITLBA CHANGE DEFAULT PORT 


/opt/demoapp1/embedded/service/demoapp1-rails/config

change listen *:8083; to what you want Ex:- 90

then

Don't run the command- demoapp1-ctl reconfigure

If demoapp1-ctl reconfigure it configured demoapp1 by defaults and remove changes.

so only run- demoapp1-ctl start

demoapp1-ctl start
demoapp1-ctl stop

systemctl restart demoapp1-runsvdir.service

/etc/demoapp1/demoapp1.rb

/opt/demoapp1/embedded/bin/chpst -P -U demoapp1-prometheus -u demoapp1-prometheus   /opt/demoapp1/embedded/bin/alertmanager --web.listen-address=localhost:8083 --storage.path=/var/opt/demoapp1/alertmanager/data --config.file=/var/opt/demoapp1/alertmanager/alertmanager.yml 
demoapp1-ctl restart 

systemctl restart demoapp1-runsvdir.service 

sudo demoapp1-ctl reconfigure 

ENABLE SSL IN gitlab: ***************************
follow the below steps:
yum install mod-ssl openssl -y
mkdir -p /etc/demoapp1/ssl
pwd
cd /etc/demoapp1/ssl
pwd
openssl genrsa -out demoapp1.key 2048
openssl req -new -key demoapp1.key -out abc.csr
openssl x509 -req -days 365 -in demoapp1.csr -signkey demoapp1.key -out demoapp1.crt

Signature ok
subject=/C=in/ST=mh/L=nm/O=tm/OU=be/CN=abhishek/emailAddress=abc@sbi.co.in
Getting Private key

http://marketplace.eclipse.org/
http://update.atlassian.com/

see the demoapp1 logs"
/var/log/demoapp1/redis
demoapp1-ctl tails
/var/log/demoapp1/unicorn/unicorn_stderr.log
/var/log/demoapp1/unicorn/current





TO change the port :- 
vi /var/opt/demoapp1/nginx/conf/demoapp1-http.conf 

TO change the db port :- 
vi /opt/demoapp1/embedded/service/demoapp1-rails/config/database.yml 

vi /etc/demoapp1/demoapp1.rb 

vi /var/opt/demoapp1/nginx/conf/demoapp1-http.conf 

vi /opt/demoapp1/embedded/service/demoapp1-rails/config/demoapp1.yml 


demoapp1-ctl start 

systemctl restart demoapp1-runsvdir.service 

sudo demoapp1-ctl reconfigure (only if changes into Vi /etc/demoapp1/demoapp1.rb) 


******************************************************
ORACLE IMPORT COMMAND
  136  . oraenv
  137  sqlplus
  138  cd $ORACLE_HOME
  139  cd network/admin
  140  ls -lrt
  141  cat listener.ora    (in this file oracle port is there)
  142  lsnrctl start LISTENER  (Start oracle services)
  143  lsnrctl stat LISTENER   (Check status of listner)
  144  sqlplus
  145  sqlplus sysdba
  146  sqlplus / as sysdba
  147  exit
  148  . oraenv
  149  sqlplus / as sysdba
  150  history
  
  To connect to a prticular user type below command:
  SQL> conn orasbi/orasbi
Connected.

****TAKE BOUNCE OF YOUR ORACLE DATABASES***
1.Login to terminal
$  . oraenv
ORACLE_SID = [oracle] ? orcl
The Oracle base has been set to /scratch/u01/app/oracle

2.Log in to SQL*Plus as the SYSDBA user
# sqlplus / as sysdba

3.Issue the SHUTDOWN command to close the database and shut down the instance
SQL>  shutdown
Database closed.
Database dismounted.
ORACLE instance shut down.


4.Issue the STARTUP command to start the instance and open the database.
SQL> startup
Total System Global Area 3355443200 bytes
Fixed Size                  8791392 bytes
Variable Size            1929382560 bytes
Database Buffers         1409286144 bytes
Redo Buffers                7983104 bytes
Database mounted.
Database opened.





vi ~/.bash_profile
# add to the end
umask 022
export ORACLE_SID=ORCLCDB
export ORACLE_BASE=/opt/oracle/oradata
export ORACLE_HOME=/opt/oracle/product/18c/dbhome_1
export PATH=$PATH:$ORACLE_HOME/bin
[oracle@dlp ~]$ source ~/.bash_profile
[root@dlp ~]# vi /etc/oratab
# last line : change

ORCLCDB:/opt/oracle/product/18c/dbhome_1:Y
[root@dlp ~]# vi /etc/sysconfig/ORCLCDB.oracledb
# create new : define environment variables

ORACLE_BASE=/opt/oracle/oradata
ORACLE_HOME=/opt/oracle/product/18c/dbhome_1
ORACLE_SID=ORCLCDB
# configure listener service

[root@dlp ~]# vi /usr/lib/systemd/system/ORCLCDB@lsnrctl.service
# this is an example, modify for free

[Unit]
Description=Oracle Net Listener
After=network.target

[Service]
Type=forking
EnvironmentFile=/etc/sysconfig/ORCLCDB.oracledb
ExecStart=/opt/oracle/product/18c/dbhome_1/bin/lsnrctl start
ExecStop=/opt/oracle/product/18c/dbhome_1/bin/lsnrctl stop
User=oracle

[Install]
WantedBy=multi-user.target

# configure database service

[root@dlp ~]# vi /usr/lib/systemd/system/ORCLCDB@oracledb.service
# this is an example, modify for free
[Unit]
Description=Oracle Database service
After=network.target lsnrctl.service

[Service]
Type=forking
EnvironmentFile=/etc/sysconfig/ORCLCDB.oracledb
ExecStart=/opt/oracle/product/18c/dbhome_1/bin/dbstart $ORACLE_HOME
ExecStop=/opt/oracle/product/18c/dbhome_1/bin/dbshut $ORACLE_HOME
User=oracle

[Install]
WantedBy=multi-user.target

[root@dlp ~]# systemctl daemon-reload
[root@dlp ~]# systemctl enable ORCLCDB@lsnrctl ORCLCDB@oracledb

CHANGE putty session timeout:
 vi /etc/ssh/sshd_config
 ClientAliveInterval  3600
 
 systemctl reload sshd




***Ansible command****

sudo dnf install python3-pip

ansible --version
o test ansible, first ensure that ssh is up and running.

$ sudo systemctl status sshd

Next, we need to create the hosts file in the /etc/ansible directory to define host machines.

$ sudo mkdir /etc/ansible  
$ cd /etc/ansible
$ sudo touch hosts
The hosts the file will be the inventory where you will have all your remote nodes.

Now open hosts file with your favorite editor and define the remote node as shown.

[web]
192.168.0.104
Next, generate SSH keys from which we will copy the public key to the remote node.

$ ssh-keygen

# all servers - Works when both server's and client's user name are same (Passwordless)

ansible all -m ping

# all servers - "raj" is managed node's user (Passwordless)

ansible all -u raj -m ping

OR

# Only demo-servers group - "raj" is managed node's user (Passwordless)

ansible demo-servers -u raj -m ping

OR

# If you use password authendication

ansible -m ping all -u raj --ask-pass







********************************************
INSTALLATIN STEPS $ CONFIGURATION for ELK
********************************************
https://www.elastic.co/guide/en/elastic-stack-get-started/current/get-started-elastic-stack.html
ELASTICSEARCH:

sudo dnf install python3-pip


Elasticsearch Configuration File
The main configuration file for Elasticsearch is /opt/bitnami/elasticsearch/conf/elasticsearch.yml
/opt/ELK/elasticsearch-7.10.0/config/elasticsearch.yml change default port 9200 to 

systemctl daemon-reload
# systemctl enable elasticsearch
# systemctl start elasticsearch
# systemctl stop elasticsearch

firewall-cmd --add-port=9200/tcp
firewall-cmd --add-port=9200/tcp --permanent


/etc/elasticsearch/elasticsearch.yml

change port and host 


systemctl enable elasticsearch.service


By default http transport and internal elasticsearch transport only listens to localhost. If you want to access Elasticsearch from the host other than localhost then try adding following configurations in config/elasticsearch.yml.

transport.host: localhost 
transport.tcp.port: 9300 
http.port: 9200
network.host: 0.0.0.0

transport.host: 10.30.36.121 
transport.tcp.port: 9200 

To make sure Elasticsearch starts and stops automatically with the server, add its init script to the default runlevels:

sudo systemctl enable elasticsearch.service

*****Setps for elastcsearch configuration*********************

all configuration is happen in elastcsearch.yml file
***add  below enty in elasticsearch.yml
bootstrap.system_call_filter: false

***add belwo entry in below path to resolve max file descriptor issue
/etc/security/limits.conf add belwo entry :max file descriptor issue resolution
appadmin   soft    nofile          65536
appadmin   hard    nofile          65536
appadmin   memlock unlimited



Add below enty in elastcsearch.yml file for security enable:
#action.destructive_requires_name: true
bootstrap.system_call_filter: false
xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true


start elastcsearch manually
go to bin path of elastcsearch and run the belw command 
./elastcsearch   

we can run below script to set password of ELK first time.....
bin/elasticsearch-setup-passwords interactive 

go to below path and configure elasticsearch.yml
/opt/elasticsearch-7.10.2/config/elasticsearch.yml

network.host: 10.191.151.123
#
# Set a custom port for HTTP:
#
http.port: 9200
transport.port: 9201
cluster.initial_master_nodes: ["node-1"]
#action.destructive_requires_name: true
bootstrap.system_call_filter: false
xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true


xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.key: /opt/elasticsearch-7.10.2/config/cert/devopspreprod.statebanktimes.in.key
xpack.security.http.ssl.certificate: /opt/elasticsearch-7.10.2/config/cert/devopspreprod.statebanktimes.in.crt
xpack.security.http.ssl.certificate_authorities: [ "/opt/elasticsearch-7.10.2/config/cert/cacert.cer" ]


*****KIBANA configuration*********************

Go to below path and chage all necessary whichis given below.
/opt/kibana-7.10.0-linux-x86_64/config/
kibana.yml

server.port: 5602
server.host: "10.191.159.50"
server.name: "kibana-server"
elasticsearch.hosts: ["http://10.191.159.50:9200"]
kibana.index: ".kibana"
elasticsearch.username: "elastic"
elasticsearch.password: "elastic"
logging.dest: /opt/ELK/kibana-7.10.0-linux-x86_64/logs/kibana.log
logging.quiet: true
logging.verbose: false

Go to the below path and create one logs folder inside that create kibana.log empty file and put that file path in kibana.yml file for logging.
/opt/kibana-7.10.0-linux-x86_64/config/


Go to bin direcoy and start the kibana services:
/opt/ELK/kibana-7.10.0-linux-x86_64/bin
./kibana

DON'T START WITH ROOT USER.


dont start with root user start with normal user and change above given entry



/opt/kibana-7.10.2-linux-x86_64/config/kibana.yml

server.port: 5062
server.host: "10.191.151.119"
server.name: "kibana-server"
elasticsearch.hosts: ["https://elkclusterpreprod.statebanktimes.in:9200"]
kibana.index: ".kibana"
elasticsearch.username: "elastic"
elasticsearch.password: "elastic"
server.ssl.enabled: true
server.ssl.certificate: "/opt/ssl_cert/current/devopspreprod.statebanktimes.in.crt"
server.ssl.key: "/opt/ssl_cert/current/devopspreprod.statebanktimes.in.key"
elasticsearch.ssl.certificateAuthorities: [ "/opt/ssl_cert/current/cacert.cer" ]
logging.dest: /opt/kibana-7.10.2-linux-x86_64/logs/kibana.log
logging.quiet: false
logging.verbose: false
xpack.encryptedSavedObjects.encryptionKey: "min-32-byte-long-strong-encryption-key"



****APM-SERVER************

 APM-SERVET PATH
/e
.yml file is there

/etc/rc.d/init.d/apm-server
/etc/apm-server   .yml file is there  (to start ./apm-server -e
/usr/bin/apm-server
/usr/share/apm-server
/usr/share/apm-server/bin/apm-server   apm executable file location.
/var/log/apm-server
/var/lib/apm-server

elsaticserch 9202
kibana 5602
apm-server 9200



APM-SERVER:
/opt/apm-server-7.11.1-linux-x86_64/apm-server.yml
apm-server:
  # Defines the host and port the server is listening on. Use "unix:/path/to.sock" to listen on a unix domain socket.
  host: "10.191.151.116:8201"
 ssl:
    enabled: true

    # Path to file containing the certificate for server authentication.
    # Needs to be configured when ssl is enabled.
    certificate: '/opt/ssl_cert/current/devops.statebanktimes.in.crt'

    # Path to file containing server certificate key.
    # Needs to be configured when ssl is enabled.
    key: '/opt/ssl_cert/current/devops.statebanktimes.in.key'

  kibana:
    # For APM Agent configuration in Kibana, enabled must be true.
    enabled: true

 
    # host: "10.191.151.119:5062"
    host: "https://kibana.statebanktimes.in:5062/"

    # Optional protocol and basic auth credentials.
    #protocol: "https"
    username: "elastic"
    password: "elastic"
output.elasticsearch:
  # Array of hosts to connect to.
 .
  hosts: ["https://elkcluster.statebanktimes.in:9200"]

  # Boolean flag to enable or disable the output module.
  enabled: true

  # Set gzip compression level.
  #compression_level: 0

  # Protocol - either `http` (default) or `https`.
  protocol: "https"

  # Authentication credentials - either API key or username/password.
  #api_key: "id:api_key"
  username: "elastic"
  password: "elastic"

ssl.enabled: true

  # Optional SSL configuration options. SSL is off by default, change the `protocol` option if you want to enable `https`.
 
  #ssl.verification_mode: full

  
 
  ssl.certificate_authorities: ["/opt/ssl_cert/current/cacert.cer"]

  # Certificate for SSL client authentication.
  ssl.certificate: "/opt/ssl_cert/current/devops.statebanktimes.in.crt"

  # Client Certificate Key
  ssl.key: "/opt/ssl_cert/current/devops.statebanktimes.in.key"

logging.to_files: true
logging.files:

  path: /opt/apm-server-7.11.1-linux-x86_64/logs/apm-server

  # The name of the files where the logs are written to.
  name: apm-server

  # Configure log file size limit. If limit is reached, log file will be
  # automatically rotated.
  rotateeverybytes: 10485760 # = 10MB

  # Number of rotated log files to keep. Oldest files will be deleted first.
  keepfiles: 7


start logstash:  bin/logstash -f logstash.conf 

Go to below path of tomcat and creat one 
/opt/tomcat/logs/
create elkagent.log empty file inside it.


Create one folder structure on tocat server and put apm-aget jar over there
/etc/elkapmagent/elastic-apm-agent-1.19.0.jar

alsow put epm-agent jar inside tomcat forlder
cd /opt/tomcat
elastic-apm-agent-1.19.0.jar

set java path:
run the below command direcly 
export JAVA_HOME=/usr/java/jdk1.8.0_271-amd64
export PATH=$JAVA_HOME/bin:$PATH

and also set path as environment variable 
vi ~/.bashrc
export JAVA_HOME=/usr/java/jdk1.8.0_271-amd64
export PATH=$JAVA_HOME/bin:$PATH

then run echo $JAVA_HOME
/usr/java/jdk1.8.0_271-amd64

add environment variable 
vi ~/.bash_profile
#export JAVA_HOME=/usr/java/jdk-11.0.9
#export PATH=$PATH:/usr/java/jdk-11.0.9/bin
export PATH
export JRE_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242


Create one file name setenv.sh file and put below entry in it and put that setenv.sh inside in
create one file setenv.sh in tomcat/bin directory
and put below entry on it
 java -javaagent:/path/to/elastic-apm-agent-<version>.jar \
     -Delastic.apm.service_name=my-application \
     -Delastic.apm.server_urls=http://localhost:8200 \
     -Delastic.apm.secret_token= \
     -Delastic.apm.application_packages=org.example \
     -jar my-application.jar



APM AGEN CONFIGURATION:

we can run below script to set password of ELK first time.....
bin/elasticsearch-setup-passwords interactive 



https://search.maven.org/search?q=g:co.elastic.apm%20AND%20a:elastic-apm-agent 
download apm agent jar 

create one file setenv.sh in tomcat/bin directory
and put below entry on it
 java -javaagent:/path/to/elastic-apm-agent-<version>.jar \
     -Delastic.apm.service_name=my-application \
     -Delastic.apm.server_urls=http://localhost:8200 \
     -Delastic.apm.secret_token= \
     -Delastic.apm.application_packages=org.example \
     -jar my-application.jar
	 

export CATALINA_OPTS="$CATALINA_OPTS -javaagent:/etc/elkapmagent/elastic-apm-agent-1.19.0.jar"
export CATALINA_OPTS="$CATALINA_OPTS -Delastic.apm.service_name=tomcat-service"
export CATALINA_OPTS="$CATALINA_OPTS -Delastic.apm.application_packages=org.sbi"
export CATALINA_OPTS="$CATALINA_OPTS -Delastic.apm.server_urls=http://10.191.159.50:9200"
export CATALINA_OPTS="$CATALINA_OPTS -Delastic.apm.log_level=INFO
export CATALINA_OPTS="$CATALINA_OPTS -Delastic.apm.log_file=/etc/elkapmagent/logs/agent.log


 vi ~/.bash_profile
 
#export JAVA_HOME=/usr/java/jdk-11.0.9
#export PATH=$PATH:/usr/java/jdk-11.0.9/bin
export PATH
export JRE_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242

make sure we have to run elasticsearch except root user 

in yaml file put that entry
xpack.security.enabled: true

./bin/elasticsearch-setup-passwords interactive


https://www.elastic.co/guide/en/elasticsearch/reference/6.8/get-started-enable-security.html[4:43 PM] Rajesh.S Mistry
    


ect/sysconfig/elasticsearch
ES_PATH_CONF=/opt/ELK/elasticsearch-7.10.0/config ./bin/elasticsearch

xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true

./bin/elasticsearch-setup-passwords interactive
password: elastic  (for all elasticsearch,kibana ,beats,apm etc) xpack 


*******************Metricbeat************************************

/etc/metricbeat
/etc/rc.d/init.d/metricbeat
/usr/bin/metricbeat
/usr/share/metricbeat
/usr/share/metricbeat/bin/metricbeat
/var/log/metricbeat
/var/log/metricbeat/metricbeat
/var/lib/metricbeat

/usr/share/metricbeat/bin  yam file is there 

[root@ETADEVOPSAPP03DEV bin]# curl http://10.191.159.50:8200
{
  "build_date": "2020-11-09T18:38:48Z",
  "build_sha": "d5f4e01307540517d964edfe4af9d31227e0ce91",
  "version": "7.10.0"
}


module: kibana
  metricsets: ["status"]
  period: 10s
  hosts: ["localhost:5601"]
  basepath: ""
  enabled: true
  # Set to true to send data collected by module to X-Pack
  # Monitoring instead of metricbeat-* indices.
  #xpack.enabled: false


******************Logstash**************

go to bin directory and make chagne in below file 
/opt/Software/logstash-7.10.0/bin

logstash.yml

take new .yml file from above link


logstash-simple.conf
add below enty in losstash-simple.conf
input {
  beats {
  }
}

output {
  elasticsearch {
    hosts => ["http://10.191.159.50:9200"]
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "elastic"
  }
}

To run logstash: 
./logstash -f logstash-simple.conf



*****************Metricbeat: url***********************
https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-reference-yml.html
Take new .yml file from above link

done changes in : logstash-sample.conf
put below enty in logstash-sample.conf file
input {
  beats {
    port => 5044
  }
}

output {
  elasticsearch {
    hosts => ["http://10.191.159.50:9200"]
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "elastic"
  }
}

We have made following changes:
We created new metricbeat.yml file with required configurations We enabled Logstash :input to beats and output to elastcsearch

We have configured metricbeat.yml to Logstash output
We have changed logstash-simple.conf  : for input to beats port and output to Elasticsearch
We have got metricbeat-* index in Elasticsearch and its logs as we tried enabling Elasticsearch and Kibana as the modules itself.
We tried to enable the “setup.dashboards.enabled: true” in metricbeat.yml but it didn’t seem to workout.



**************NEXUS Configuration steps***************************************************************
https://www.fosslinux.com/27838/installing-sonatype-nexus-repository-oss-on-centos-7.htm
To install nexus: ./nexus run

/opt/nexus/etc 
nexus-default.properties

change the port and hots ip 
host:10.191.159.49
post:8082

Change the port over hare and  hots

systemctl daemon-reload
Enable service on system boot.

systemctl enable nexus.service
Start service.

systemctl start nexus.service
Monitor the log file.

tail -f /opt/nexusdata/nexus3/log/nexus.log

**************************
Set Nexus as a System Service


Create the Systemd service file in “/etc/systemd/system/”.

vim /etc/systemd/system/nexus.service
Add the following to the file.

[Unit]
Description=Nexus Service
After=syslog.target network.target

[Service]
Type=forking
LimitNOFILE=65536
ExecStart=/opt/nexus/bin/nexus start
ExecStop=/opt/nexus/bin/nexus stop
User=nexus
Group=nexus
Restart=on-failure

[Install]
WantedBy=multi-user.target
Reload systemctl.

systemctl daemon-reload
Enable service on system boot.

systemctl enable nexus.service
Start service.

systemctl start nexus.service
Monitor the log file.

tail -f /opt/nexusdata/nexus3/log/nexus.log

Activate the service with the following commands:

sudo systemctl daemon-reload
sudo systemctl enable nexus.service
sudo systemctl start nexus.service


To start nexus as service run the below command:
cd /etc/init.d
sudo chkconfig --add nexus
sudo chkconfig --levels 345 nexus on
sudo service nexus start

nexus first time login password stored insixe below file
vim /opt/sonatype-work/nexus3/admin.password



****NEGIOS**********************************************
Change default port of negios
/etc/httpd/conf.d/ssl.conf

/etc/httpd/conf/httpd.conf
Listen 12.34.56.78:80
Listen 6080

/opt/Software/nagios/nagios-4.3.2/html/config.inc.php      file is there in my casee

Chnage url for nagios
/etc/httpd/conf.d/nagios.conf

Alias /nagios "/usr/local/nagios/share" (change nagios as test then url will be changed)

/usr/local/nagios/etc/cgi.cfg
url_html_path=/nagios   (nagios/test then url will be changed)

Put port entry in belwo file:
$cfg['port_number'] = 6080;
/usr/local/nagios/share/config.inc.php
/opt/Software/nagios/nagios-4.3.2/html/config.inc.php

Nagios log file location
/usr/local/nagios/var
****************************************************
Nagios configuration of for other server monitoring:
*****************************************************


put below entyr of created format for all the servers

/usr/local/nagios/etc/hosts/devops.cfg
define host{
use                             devops-server
host_name                       R0ETADVOPSAP028
alias                           R0ETADVOPSAP028
display_name                    R0ETADVOPSAP028
address                         10.191.151.118
}


/usr/local/nagios/etc/hostgroups/hostgroups.cfg

define hostgroup{
        hostgroup_name   DEVOPS ; The name of the hostgroup
        alias            DEVOPS PREPROD SERVERS  ; Long name of the group
        members R0ETADVOPSWP001,R0ETADVOPSWP002,R0ETADVOPSAP001,R0ETADVOPSAP002,R0ETADVOPSAP003,R0ETADVOPSAP004,R0ETADVOPSAP005,R0ETADVOPSAP006,R0ETADVOPSAP007,R0ETADVOPSAP008,R0ETADVOPSAP009,R0ETADVOPSAP011,R0ETADVOPSDP001,R0ETADVOPSDP002,R0ETADVOPSDP003,R0ETADVOPSAP022,R0ETADVOPSAP023,R0ETADVOPSAP024,R0ETADVOPSAP025,R0ETADVOPSAP026,R0ETADVOPSAP027,R0ETADVOPSAP028,R0ETADVOPSAP029,R0ETADVOPSAP030,R0ETADVOPSAP031
}


/usr/local/nagios/etc/commands/devops_commands.cfg

define command{
        command_name check_nrpe
        command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -p 8087 -c $ARG1$
 }


/usr/local/nagios/etc/services/devops_linux.cfg

define service{
        use                     devops-service
        hostgroup_name           DEVOPS
        service_description     Total Processes
        check_command            devops_check_total_procs!350!450
        }



/usr/local/nagios/etc/templates/templates.cfg

# Generic contact definition template - This is NOT a real contact, just a template!

define contact{
        name                            generic-contact         ; The name of this contact template
        service_notification_period     24x7                    ; service notifications can be sent anytime
        host_notification_period        24x7                    ; host notifications can be sent anytime
        service_notification_options    w,u,c,r,f,s             ; send notifications for all service states, flapping events, and scheduled downtime events
        host_notification_options       d,u,r,f,s               ; send notifications for all host states, flapping events, and scheduled downtime events
        service_notification_commands   notify-service-by-email ; send service notifications via email
        host_notification_commands      notify-host-by-email    ; send host notifications via email
        register                        0                       ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL CONTACT, JUST A TEMPLATE!
        }
###############################################################################
###############################################################################
#
# HOST TEMPLATES
#
###############################################################################
###############################################################################

# Generic host definition template - This is NOT a real host, just a template!

define host{
        name                            generic-host    ; The name of this host template
        use                               host-pnp
        notifications_enabled           1               ; Host notifications are enabled
        event_handler_enabled           1               ; Host event handler is enabled
        flap_detection_enabled          1               ; Flap detection is enabled
        process_perf_data               1               ; Process performance data
        retain_status_information       1               ; Retain status information across program restarts
        retain_nonstatus_information    1               ; Retain non-status information across program restarts
        notification_period             24x7            ; Send host notifications at any time
        register                        0               ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL HOST, JUST A TEMPLATE!
        }



put all above configure file in nagios.cfg file
/usr/local/nagios/etc/nagios.cfg

log_file=/usr/local/nagios/var/nagios.log

cfg_dir=/usr/local/nagios/etc/hosts
cfg_dir=/usr/local/nagios/etc/services
cfg_dir=/usr/local/nagios/etc/hostgroups
cfg_dir=/usr/local/nagios/etc/commands
cfg_dir=/usr/local/nagios/etc/templates


# OBJECT CONFIGURATION FILE(S)
# These are the object configuration files in which you define hosts,
# host groups, contacts, contact groups, services, etc.
# You can split your object definitions across several config files
# if you wish (as shown below), or keep them all in a single config file.

# You can specify individual object config files as shown below:
cfg_file=/usr/local/nagios/etc/objects/commands.cfg
cfg_file=/usr/local/nagios/etc/objects/contacts.cfg
cfg_file=/usr/local/nagios/etc/objects/timeperiods.cfg
#cfg_file=/usr/local/nagios/etc/objects/templates.cfg

# Definitions for monitoring the local (Linux) host
cfg_file=/usr/local/nagios/etc/objects/localhost.cfg

service httpd start              
systemctl start httpd.service    

service nagios start             
systemctl start nagios.service   


/etc/rc.d/init.d/nagios stop
/etc/rc.d/init.d/nagios start

sudo systemctl status nagios
sudo systemctl start nagios

/usr/local/nagios/etc

vi /usr/local/nagios/etc/nagios.cfg

vi /usr/local/nagios/etc/nagios.cfg

Chnage url for nagios
/etc/httpd/conf.d/nagios.conf

Alias /nagios "/usr/local/nagios/share" (change nagios as test then url will be changed)

/usr/local/nagios/etc/cgi.cfg
url_html_path=/nagios   (nagios/test then url will be changed
===== RHEL 7/8 | CentOS 7/8 | Oracle Linux 7/8 =====

systemctl start nagios.service
systemctl stop nagios.service
systemctl restart nagios.service
	


RHEL 7.x / 8.x | Oracle Linux 7.x / 8.x =====
systemctl start nrpe.service
systemctl stop nrpe.service
systemctl restart nrpe.service
systemctl status nrpe.service


General Options:
 -------------------------
 NRPE port:    5666
 NRPE user:    nagios
 NRPE group:   nagios
 Nagios user:  nagios
 Nagios group: nagios


INSTALLATION OF NRPE PLUGIN:
/usr/lib/tmpfiles.d/nrpe.conf  allow remote access

[user@mon]# cd ~
[user@mon]# wget https://github.com/NagiosEnterprises/nrpe/releases/download/nrpe-3.1.0/nrpe-3.1.0.tar.gz
[user@mon]# tar xvfz nrpe-3.1.0.tar.gz
[user@mon]# cd nrpe-3.1.0
[user@mon]# ./configure
[user@mon]# make all
[user@mon]# make install-groups-users
[user@mon]# make install
[user@mon]# make install-config
[user@mon]# make install-init

Install these packages on the node:

[user@mon]# yum install openssl openssl-devel gcc make git

NRPE installation requires a Nagios user. So create the user first:

[user@mon]# useradd nagios
[user@mon]# passwd nagios
Download the latest version of the Nagios plug-ins. Then, make and install them:

[user@mon]# wget http://www.nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz
[user@mon]# tar zxf nagios-plugins-2.2.1.tar.gz
[user@mon]# cd nagios-plugins-2.2.1
[user@mon]# ./configure
[user@mon]# make
[user@mon]# make install
NRPE uses xinetd for communication. Install it before installing the NRPE module:

[user@mon]# yum install xinetd
Download the latest verion of the Ceph plug-ins:

[user@mon]# cd ~
[user@mon]# git clone --recursive https://github.com/valerytschopp/ceph-nagios-plugins.git
[user@mon]# cd ceph-nagios-plugins
[user@mon]# make dist
[user@mon]# make install
Download, make and install Nagios NRPE:

[user@mon]# cd ~
[user@mon]# wget https://github.com/NagiosEnterprises/nrpe/releases/download/nrpe-3.1.0/nrpe-3.1.0.tar.gz
[user@mon]# tar xvfz nrpe-3.1.0.tar.gz
[user@mon]# cd nrpe-3.1.0
[user@mon]# ./configure
[user@mon]# make all
[user@mon]# make install-groups-users
[user@mon]# make install
[user@mon]# make install-config
[user@mon]# make install-init
Edit the the /etc/services file, and add the service string nrpe 5666/tcp:
Open port 5666 to allow communication with NRPE:

[user@mon]# firewall-cmd --zone=public --add-port=5666/tcp
[user@mon]# firewall-cmd --zone=public --add-port=5666/tcp --permanent
Additional Resources

See https://github.com/valerytschopp/ceph-nagios-plugins for details.
3.2. Starting the Nagios Remote Plug-in Executor service
Start the Nagios Remote Plug-in Executor service to collect data and report it back to the Nagios Core server.

Prerequisites

User-level access to the Ceph Monitor node
Procedure

Enable, restart, and reload xinetd:

[user@mon]# systemctl enable xinetd
[user@mon]# systemctl restart xinetd
[user@mon]# systemctl reload xinetd
Enable and start NRPE:

[user@mon]# systemctl enable nrpe
[user@mon]# systemctl start nrpe

nrpe.conf file is there in two places:
/usr/local/nagios/etc/nrpe.cfg  
/usr/lib/tmpfiles.d

firewall-cmd --zone=public --add-port=161/tcp
firewall-cmd --zone=public --add-port=161/tcp --permanent




/usr/local/nagios/etc/cgi.cfg 
url_html_path=/nagios
to change 

https://mkyong.com/maven/how-to-install-maven-in-windows/


tomcat****
user :manager
pass :s3cret

mysql:





Syncope url:
http://syncope.apache.org/docs/2.1/reference-guide.html






SSO URL'S:
https://confluence.atlassian.com/crowd/overview-of-sso-179445277.html#:~:text=The%20core%20Crowd%20functionality%20supports,be%20in%20the%20same%20domain.

 
For Jenkins, below mentioned plugin has been used
 
For Crowd, https://plugins.jenkins.io/crowd2/
 
For LDAP, https://plugins.jenkins.io/ldap/
For SAML, https://plugins.jenkins.io/saml/






/usr/local/konakart
/usr/local/konakart/java_api_examples/src/com/konakart
/usr/local/konakart/custom/engine/src/com/konakart
/usr/local/konakart/custom/engine/gensrc/com/konakart
/usr/local/konakart/custom/engine/examples/com/konakart
/usr/local/konakart/custom/modules/src/com/konakart
/usr/local/konakart/custom/appn/src/com/konakart
/usr/local/konakart/custom/konakart_portlet/liferayWildfly/7.0/konakart
/usr/local/konakart/custom/konakart_portlet/liferayJBoss/6.2/konakart
/usr/local/konakart/custom/konakart_portlet/liferayJBoss/6.0.6/konakart
/usr/local/konakart/custom/konakart_portlet/liferayJBoss/6.2.0/konakart
/usr/local/konakart/custom/konakart_portlet/liferayJBoss/6.1.20/konakart
/usr/local/konakart/custom/konakart_portlet/liferayJBoss/6.1.1/konakart
/usr/local/konakart/custom/konakart_portlet/liferayJBoss/6.1.0/konakart
/usr/local/konakart/custom/utils/src/com/konakart
/usr/local/konakart/webapps/javadoc/server/com/konakart
/usr/local/konakart/webapps/javadoc/admin/com/konakart
/usr/local/konakart/webapps/javadoc/client/com/konakart

/usr/local/konakart/webapps/konakart


/usr/local/konakart/bin  konakart .sh file is there 
startkonakart.sh

drwxrwxr-x.  7 root root 4096 Dec 11 16:23 konakart
drwxrwxr-x.  5 root root 4096 Dec 11 16:23 konakartadmin
drwxrwxr-x.  5 root root 4096 Dec 11 16:23 javadoc
drwxrwxr-x.  3 root root 4096 Dec 11 16:23 ROOT
drwxrwxr-x. 10 root root 4096 Dec 11 19:19 birtviewer



*********************gitlab:************************************
https://www.softwaretestingclass.com/tutorial-2-gitlab-installation-and-creation-of-a-new-test-project/



Create user in oracle:
CREATE USER abhishek IDENTIFIED BY abhishek;
GRANT CONNECT TO abhishek;

GRANT CONNECT, RESOURCE, DBA TO abhishek;
GRANT ALL PRIVILEGES TO abhishek;

GRANT create session TO abhishek;
GRANT create table TO abhishek;
GRANT create view TO abhishek;
GRANT create any trigger TO abhishek;
GRANT create any procedure TO abhishek;
GRANT create sequence TO abhishek;
GRANT create synonym TO abhishek;

username:abhishek
password:abhishek



https://crunchify.com/step-by-step-guide-to-enable-https-or-ssl-correct-way-on-apache-tomcat-server-port-8443/
  <Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
               maxThreads="150" scheme="https" secure="true"
               keystoreFile="/Users/Shared/crunchify.keystore" keystorePass="123456"
               clientAuth="false" sslProtocol="TLS" sslVerifyClient="optional"
			   sslEnabledProtocols="TLSv1.2,TLSv1.1,SSLv2Hello"/>
			   
			   
			   
			   
http://devopsdev.statebanktimes.in:9090/adopt-portal/login#

git clone http://demoapp1.sbi.co.in:8083/root/adopt_portal.git

C:\Windows\System32\drivers\etc in window host file path 



***********KEYCLOAK********************************
https://www.techrunnr.com/how-to-set-up-a-demoapp1-server-in-linux/
https://www.demoapp1.org/docs/6.0/server_installation/

http://10.191.159.48:6565/auth/
http://10.191.159.48:6565/auth/admin/master/console/#/realms/master


Add user in gitlab before 1st login by using below comand
user:admin
password:password
./add-user-demoapp1.sh -u admin -p password
/bin/add-user-keycloak.sh -u admin -p admin


Then run below url for loging.
http://10.191.159.48:6565/auth/

To Create services for Keyclock so that we can start gitlab as services.
Step:to create service
cat > /etc/systemd/system/demoapp1.service <<EOF

[Unit]
Description=Keycloak
After=network.target

[Service]
Type=idle
User=gitlab
Group=gitlab
ExecStart=/opt/gitlab-12.0.1/binstandalone.sh -b 0.0.0.0
TimeoutStartSec=600
TimeoutStopSec=600

[Install]
WantedBy=multi-user.target
EOF

Keycloack integration with adopt code and documentiion
https://www.demoapp1.org/documentation
Keycloack integration with Spring Security
https://www.baeldung.com/spring-boot-demoapp1


UAT
http://10.191.159.51:6565/auth/admin/master/console/#/realms/master
./add-user-demoapp1.sh -u admin -p admin

user: admin
password: admin


<                         <keystore path="application.keystore" relative-to="jboss.server.config.dir" keystore-password="password" alias="server" key-password="password" generate-self-signed-certificate-host="localhost"/>
---
>                         <keystore path="application.keystore" relative-to="jboss.server.config.dir" keystore-password="password" alias="server" key-password="password" generate-self-signed-certificate-host="10.191.159.48"/>
579c579
<             <inet-address value="${jboss.bind.address.management:127.0.0.1}"/>
---
>             <inet-address value="${jboss.bind.address.management:10.191.159.48}"/>
582c582
<             <inet-address value="${jboss.bind.address:127.0.0.1}"/>
---
>             <inet-address value="${jboss.bind.address:10.191.159.48}"/>
587c587
<         <socket-binding name="http" port="${jboss.http.port:8080}"/>
---
>         <socket-binding name="http" port="${jboss.http.port:6565}"/>
594c594
<             <remote-destination host="${jboss.mail.server.host:localhost}" port="${jboss.mail.server.port:25}"/>
---
>             <remote-destination host="${jboss.mail.server.host:10.191.159.48}" port="${jboss.mail.server.port:25}"/>


gitlab services.
https://www.techrunnr.com/how-to-set-up-a-demoapp1-server-in-linux/

cat > /etc/systemd/system/demoapp1.service <<EOF

[Unit]
Description=Keycloak
After=network.target

[Service]
Type=idle
User=demoapp1
Group=demoapp1
ExecStart=/opt/demoapp1/current/bin/standalone.sh -b 0.0.0.0
TimeoutStartSec=600
TimeoutStopSec=600

[Install]
WantedBy=multi-user.target
EOF


Step 8: Reload the systemd daemon and start Keycloak.

systemctl daemon-reload
systemctl enable demoapp1
systemctl start demoapp1
Step 9: Create an admin user using below command line.

./bin/add-user-demoapp1.sh -u admin -p YOURPASS -r master

***********KEYCLOAK CONFIGURATION WITH POSTGRESQL:*************************************************
step1:create user and schema and give all permission to him
CREATE USER gitlab WITH PASSWORD 'gitlab';
CREATE DATABASE gitlab WITH ENCODING 'UNICODE' LC_COLLATE 'C' LC_CTYPE 'C' TEMPLATE TEMPLATE0;
GRANT CONNECT ON DATABASE gitlab TO gitlab;
GRANT USAGE ON SCHEMA public TO gitlab;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO gitlab;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO gitlab;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO gitlab;
GRANT ALL PRIVILEGES ON DATABASE gitlab TO gitlab;
ALTER USER gitlab CREATEDB;
ALTER USER gitlab WITH SUPERUSER; 

ALTER DEFAULT PRIVILEGES FOR USER gitlab IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO gitlab;

step2:create folder structure and put below jar in side it.
go to gitlab server and create folder structure like this 

/opt/keycloak-12.0.1/modules/system/layers/gitlab/org/postgresql/main
put below jar and create one module.xml in it and put below entry.

module.xml
<?xml version="1.0" ?>
<module xmlns="urn:jboss:module:1.3" name="org.postgresql">

    <resources>
        <resource-root path="postgresql-9.4.1212.jar"/>
    </resources>

    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>


download below jar and put at given loaction:
/opt/keycloak-12.0.1/modules/system/layers/keycloak/org/postgresql/main
postgresql-9.4.1212.jar


Step3: go to standalone.xml and put below entry.
/opt/keycloak-12.0.1/standalone/configuration/standalone.xml

 <datasource jndi-name="java:jboss/datasources/KeycloakDS" pool-name="KeycloakDS" enabled="true" use-java-context="true">
                    <connection-url>jdbc:postgresql://10.191.213.54:5454/gitlab</connection-url>
                    <driver>postgresql</driver>
                    <pool>
                        <max-pool-size>20</max-pool-size>
                    </pool>
                    <security>
                        <user-name>keycloak</user-name>
                        <password>keycloak</password>
                    </security>
                </datasource>

<driver name="postgresql" module="org.postgresql">
                    <xa-datasource-class>org.postgresql.xa.PGXADataSource</xa-datasource-class>
                   </driver>






configure demoapp1 with postgres:
https://devopstales.github.io/sso/demoapp12/

/opt/demoapp1-7.9.1/lib/jdbc/postgresql/postgresql-42.2.5.jar



configure apr:
http://tomcat.apache.org/native-doc/

ENABLE SSL IN TOMCAT*******************FOLLOW THE SAME STEPS ***************************
https://www.fatalerrors.org/a/the-apr-library-was-not-found-on-the-java.library.path.html


demoapp1 ssl configuration:


Got to below path and add below entry
/etc/httpd/conf.d
<VirtualHost demoapp1dev.statebanktimes.in:9100>
SSLEngine on
SSLProtocol all -SSLv2 -SSLv3
SSLCipherSuite HIGH:3DES:!aNULL:!MD5:!SEED:!IDEA
ProxyRequests     Off
AllowEncodedSlashes NoDecode
    ProxyPreserveHost On

    ProxyPass / http://10.191.159.48:6565/
    ProxyPassReverse / http://10.191.159.48:6565/
    SSLCertificateFile /opt/ssl_cert/current/devopsdev.statebanktimes.in.crt
    SSLCertificateKeyFile /opt/ssl_cert/current/devopsdev.statebanktimes.in.key
RequestHeader set X-Forwarded-Proto "https"
</VirtualHost>

Got to below path and do change in standalone.xml file:

/opt/demoapp1-12.0.1/standalone/configuration

<http-listener name="default" socket-binding="http" redirect-socket="proxy-https" proxy-address-forwarding="true" enable-http2="true"/>
---
>                 <http-listener name="default" socket-binding="http" redirect-socket="https" enable-http2="true"/>
606d605
<         <socket-binding name="proxy-https" port="9100"/>


************************
Postgres scripts:
************************
CREATE USER gitlab WITH PASSWORD 'demoapp1';
CREATE DATABASE gitlab WITH ENCODING 'UNICODE' LC_COLLATE 'C' LC_CTYPE 'C' TEMPLATE TEMPLATE0;
GRANT CONNECT ON DATABASE gitlab TO gitlab;
GRANT USAGE ON SCHEMA public TO demoapp1;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO demoapp1;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO demoapp1;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO demoapp1;
GRANT ALL PRIVILEGES ON DATABASE demoapp1 TO demoapp1;
ALTER USER gitlab CREATEDB;
ALTER USER gitlab WITH SUPERUSER;
ALTER DEFAULT PRIVILEGES FOR USER demoapp1 IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO demoapp1;



export CATALINA_HOME='/opt/tomcat/'
#export JAVA_HOME=/usr/java/jdk-11.0.9
#export PATH=$JAVA_HOME/bin:$PATH
#export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242
#export JRE_HOME=/usr/java/latest/lib
export JAVA_HOME=/opt/jdk1.8.0_271
export PATH=$JAVA_HOME/bin:$PATH
export PATH
source ~/.bashrc



http://fs.testsso.com/adfs/services/trust



*****************************************
Add CA certificate fo linux server:
*****************************************

add os level certificates
 cp /opt/ssl_cert/current/cacert.pem  /etc/pki/ca-trust/source/anchors/SBI-CA.pem
  update-ca-trust extract
  update-ca-trust enable

C:\WINDOWS\system32>cd "c:\Program Files\Java\jdk1.8.0_271\jre\bin"

Go to jdk bin:
c:\Program Files\Java\jdk1.8.0_271\jre\bin>

run below command: put created ceritificate at any location and put that path in the below command

keytool -importcert -trustcacerts -file C:\prod_cacert\cacert.pem -alias sbiprod -keystore "C:\Program Files\Java\jre1.8.0_271\lib\security\cacerts"



keytool -import -file "C:\prod_cacert\cacert.pem" -keystore "C:\Program Files\Java\jre1.8.0_271\lib\security\cacerts" -storepass "changeit"


ADD ca-certificate: in linux machine 

openssl x509 -inform der -in cacert.cer -outform pem -out cacert.pem


openssl x509 -inform der -in cacert.cer -out cacert.pem

add certificate for sonar-scanner: at application level

keytool -importcert -trustcacerts -file /opt/ssl_cert/current/cacert.pem -alias sbiprod -keystore "/opt/atlassian/jira/jre/lib/security/cacerts"

/etc/rc.d/init.d/jira start
/etc/rc.d/init.d/jira start



 cd "/var/lib/jenkins"
 
 
 convert cer to crt using below command:
 
 openssl x509 -inform PEM -in devops.statebanktimes.in_b64.cer -out devops.statebanktimes.in.crt
 
 
https://plugins.jenkins.io/gitlab/
  982  ls
  983  locate cacert
  984  keytool -import -trustcacerts -alias sbi -keystore /opt/ssl_cert/cacert.cer -file /etc/pki/java/cacerts
  985  keytool -import -trustcacerts -alias sbi -keystore /opt/ssl_cert/cacert.pem -file /etc/pki/java/cacerts
  986  keytool -import -trustcacerts -alias sbi -keystore /etc/pki/java/cacerts -file /opt/ssl_cert/cacert.cer
  987  keytool -import -trustcacerts -alias sbi -keystore /etc/pki/ca-trust/extracted/java/cacerts -file /opt/ssl_cert/cacert.cer
  988  keytool -import -trustcacerts -alias sbi -keystore /opt/jdk1.8/jre/lib/security/cacerts -file /opt/ssl_cert/cacert.cer
  989  keytool -import -trustcacerts -alias sbi -keystore /opt/sonar-scanner-4.0.0.1744-linux/jre/lib/security/cacerts -file /opt/ssl_cert/cacert.cer
  990  keytool -import -trustcacerts -alias sbi -keystore /usr/java/jdk1.8.0_271-amd64/jre/lib/security/cacerts -file /opt/ssl_cert/cacert.cer
  991  keytool -import -trustcacerts -alias sbi -keystore /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.el7.x86_64/jre/lib/security/cacerts -file /opt/ssl_cert/cacert.cer
  992  systemctl stop jenkins
  993  systemctl start jenkins
  994  tail -f jenkins
  995  tail -f /var/log/jenkins/jenkins.log
  
copy complete directory:  
cp -ripv . /opt/gitlab-12.0.1/themes/custom/


KEYCLOAK H2 DATABASE TO POSTGRESQL MIGARATION
For exporting the data from Keycloak:

/opt/keycloak-12.0.1/bin/standalone.sh -Dkeycloak.migration.action=export -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=/home/keycloak_db_backup_18_june


For importing the data to Keycloak:

bin/standalone.sh -Dkeycloak.migration.action=import
-Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=/home/keycloak_db_backup_18_june
-Dkeycloak.migration.strategy=OVERWRITE_EXISTING


**************************************
KEYLOAK CUSTOMIZE LOGIN PAGE:
**************************************
URL:https://www.baeldung.com/gitlab-custom-login-page
To start the server, let's navigate to the directory where our Keycloak distribution is kept, and run this command from its bin folder:

./standalone.sh -Djboss.socket.binding.port-offset=100

Whatever the chagnes will do automatically reflect once you refres the page.


vi /opt/gitlab-12.0.1/themes/base/login/messages/messages_en.properties
vi /opt/gitlab-12.0.1/themes/gitlab.v2/account/resources/content/my-resources-page/ShareTheResource.js  
vi /opt/gitlab-12.0.1/themes/base/login/login.ftl

/opt/gitlab-12.0.1/themes/base/account/template.ftl
/opt/gitlab-12.0.1/themes/base/login/template.ftl

url:https://github.com/gitlab/gitlab-documentation/blob/master/server_development/topics/themes.adoc


<button type="button" id="social-${p.alias}" class="btn btn-primary submitBtn pull-left"></button>
<a id="social-${p.alias}" class="${properties.kcFormSocialAccountListButtonClass!} <#if social.providers?size gt 3>${properties.kcFormSocialAccountGridItem!}</#if>"
                                type="button" href="${p.loginUrl}">
                            <#if p.iconClasses?has_content>
                                <i class="${properties.kcCommonLogoIdP!} ${p.iconClasses!}" aria-hidden="true"></i>
                                <span class="${properties.kcFormSocialAccountNameClass!} kc-social-icon-text">${p.displayName!}</span>
                            <#else>
                                <span class="${properties.kcFormSocialAccountNameClass!}">${p.displayName!}</span>
                            </#if>
                        </a>





*************gitlab********************************
After installation make sure stop the firewalld 
systemctl stop firewalld

SSL CONFIGURATION
Setp: go to below path and chance only certificate path

vi /opt/gitlab-1.9.20-9/apache2/conf/bitnami/bitnami.conf

 

<VirtualHost _default_:443>

  DocumentRoot "/opt/gitlab-1.9.20-9/apache2/htdocs"

  SSLEngine on

SSLCertificateFile "/opt/ssl_cert/current/ devopspreprod.statebanktimes.in.crt"
SSLCertificateKeyFile "/opt/ssl_cert/current/devopspreprod.statebanktimes.in.key"


 

  <Directory "/opt/gitlab-1.9.20-9/apache2/htdocs">

    Options Indexes FollowSymLinks

    AllowOverride All

    <IfVersion < 2.3 >

      Order allow,deny

      Allow from all

    </IfVersion>

    <IfVersion >= 2.3 >

      Require all granted

    </IfVersion>

  </Directory>

 

  # Error Documents

  ErrorDocument 503 /503.html

 

  # Bitnami applications installed with a prefix URL (default)

  Include "/opt/gitlab-1.9.20-9/apache2/conf/bitnami/bitnami-apps-prefix.conf"

</VirtualHost>

 

 

Step2:Check the listen port 

/opt/gitlab-1.9.20-9/apache2/conf/ httpd.conf

Follow urls for gitlab and gitlab configuration

https://github.com/dnozay/gitlab-code/blob/master/config.inc.php

/opt/gitlab-1.9.20-9/apps/gitlab/htdocs/config.inc.php
/opt/gitlab-1.9.20-9/apps/phpmyadmin/htdocs/config.inc.php

/opt/gitlab-1.9.20-9/apps/gitlab/htdocs/logs/  log files path:


only two files are there in gitlab application.

/opt/gitlab-1.9.20-9/ctlscript.sh start
/opt/gitlab-1.9.20-9/ctlscript.sh restart
/opt/gitlab-1.9.20-9/ctlscript.sh stop
/opt/gitlab-1.9.20-9
/opt/gitlab-1.9.20-9/ctlscript.sh restart mysql
/opt/gitlab-1.9.20-9/ctlscript.sh restart postgresql
/opt/gitlab-1.9.20-9/ctlscript.sh restart apache
/opt/gitlab-1.9.20-9/ctlscript.sh status


/opt/gitlab-1.9.20-9/apps/gitlab/htdocs/lib/functions/logger.class.php


/opt/gitlab-1.9.20-9/php/etc/php.ini
/opt/gitlab-1.9.20-9/mysql/scripts/ctl.sh

https://github.com/TestLinkOpenSourceTRMS/gitlab-code
https://docs.bitnami.com/installer/apps/gitlab/configuration/install-modules-php/
https://github.com/johandoornenbal/gitlab-examples/blob/master/php-authen.php


DB CONNECTION:
/opt/gitlab/apps/gitlab/htdocs/config_db.inc.php

getsebool -a | grep httpd
If httpd_can_network_connect_db is Off, enable it via:

setsebool -P httpd_can_network_connect_db 1

******
Check domain and ip is configured corretly or not.
nslookup <DomainName>
nslookup gitlabpreprod.statebanktimes.in


********************************************
gitlab basic commands:
********************************************
Git global setup
git config --global user.name "Administrator"
git config --global user.email "admin@example.com"

Create a new repository
git clone https://gitlabpreprod.statebanktimes.in/root/testproject-.git
cd testproject-
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

Existing folder
cd existing_folder
git init
git remote add origin https://gitlabpreprod.statebanktimes.in/root/dotnet_app.git
git add .
git commit -m "Initial commit"
git push -u origin master

Existing Git repository
cd existing_repo
git remote rename origin old-origin
git remote add origin https://gitlabpreprod.statebanktimes.in/root/testproject-.git
git push -u origin --all
git push -u origin --tags


#####for merger##########################

git checkout branchName(master) (where you want to merge)
git merge bracheNmae(branch name) (which you want to merger)
git push


git branch -b branchname (create new brach)
git checkout branchname (got to created branch)
git pull (All code will be pulled)

git branch -a (to see how many branches are there)



vim /opt/gitlab/embedded/lib/ruby/gems/2.5.0/gems/unicorn-5.1.0/examples/nginx.conf
vim /var/opt/gitlab/nginx/conf/nginx.conf


To ignore target folder from workspace at the time of commit.
***************************************************************
go to workspace: D:\Work_Space\ADOPT_PORTAL_FORTIFY_FIX\adopt-service
create one file name: .gitignore
put below entry in it: 
/target/
*/target/**
**/META-INF/
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

this will ignore the target folder from your workspace




**********************************************
Steps for gitlab gitlab configuration:
**********************************************

/opt/gitlab-1.9.20-9/apps/gitlab/htdocs
login.php
logout.php
index.php
config.inc.php

/opt/gitlab-1.9.20-9/apps/gitlab/htdocs/lib/functions
common.php
doAuthorize.php
gitlab.php



/opt/gitlab-1.9.20-9/apps/gitlab/htdocs/lib/functions
****Add below line on top of gitlab.php**********
require_once '/opt/gitlab-1.9.20-9/apps/gitlab/htdocs/lib/functions/php-jwt/src/BeforeValidException.php';
require_once '/opt/gitlab-1.9.20-9/apps/gitlab/htdocs/lib/functions/php-jwt/src/ExpiredException.php';
require_once '/opt/gitlab-1.9.20-9/apps/gitlab/htdocs/lib/functions/php-jwt/src/SignatureInvalidException.php';
require_once '/opt/gitlab-1.9.20-9/apps/gitlab/htdocs/lib/functions/php-jwt/src/JWT.php';



curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
curl_setopt($curl, CURLOPT_CAPATH, "/opt/ssl_cert/cacert.pem");


function getAndDecodeAccessToken($code)
function verifyUserSessionInKeycloak()
function verifyUserSession(){



vim /opt/gitlab-1.9.20-9/apps/gitlab/htdocs/lib/functions/doAuthorize.php
doAuthorize.php
line no :53 $isKeylcloak = false;
to login with gitlab
$isKeylcloak = true;

/opt/gitlab-1.9.20-9/apps/gitlab/htdocs/config.inc.php
config.inc.php

$tlCfg->authentication['method'] = 'DB';
$tlCfg->logoutUrl = '';

/opt/gitlab-1.9.20-9/apps/gitlab/htdocs/config.inc.php
to login with gitlab
$tlCfg->logoutUrl='https://testlinkuat.statebanktimes.in/auth/realms/Adopt/protocol/openid-connect/auth?client_id=testlink2&response_type=code&redirect_uri=http://10.191.154.218:3333/gitlab/login.php';
$tlCfg->authentication['method'] = 'gitlab';


vim /opt/gitlab-1.9.20-9/apps/gitlab/htdocs/lib/functions/common.php        line no 261
 // if($isValidSession){
 //   $isValidSession=verifyUserSessionInKeycloak();
 // }


create user for teslink
Go to gitlab ->user and create user
usrname
credential set password for that.

*****only change config.inc.php**********
**********************************************

$tlCfg->authentication['method'] = 'gitlab';
$tlCfg->logoutUrl = 'https://testlinkdev.statebanktimes.in/auth/realms/Adopt/protocol/openid-connect/auth?client_id=testlink2&response_type=code&redirect_uri=https://testlinkdev.statebanktimes.in/gitlab/login.php';

$tlCfg->authentication['gitlab']['redirect_uri'] = 'https://testlinkdev.statebanktimes.in/gitlab/login.php';
$tlCfg->authentication['gitlab']['token_url'] = "https://testlinkdev.statebanktimes.in/auth/realms/Adopt/protocol/openid-connect/token";
$tlCfg->authentication['gitlab']['user_info_url'] = "https://testlinkdev.statebanktimes.in/auth/realms/Adopt/protocol/openid-connect/userinfo";
$tlCfg->authentication['gitlab']['logout_url'] = "https://testlinkdev.statebanktimes.in/auth/realms/Adopt/protocol/openid-connect/logout";
$tlCfg->authentication['gitlab']['public_key'] = '-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqjKceyv6Va7YOD/10wn1W/pHLWL3/LClcjJDCW2a2oOd3d30UT2SVQFJQDYe8ApLdGBwfWBuBbSSaHVNtsaUNcTh9+9f7TMxLP8a96f+fqnbryBE0irRA9xn9Xrlo4wFn7EVMejr4D6bz8VftteBglm36lPJBjakYBXz3mdcpjHAIhF16lek3BB152sw+gj/8HLPw9nI3o5MTY+ye9J0MlDBKJkOJ04+ElPTQC8bxwMCY1Az2ykXqfMevXgtC6ms3GcgGe3BfFTytoJuorKnhqD5sAwIdo/jpIFnyfGGRctxE7tcaIZtN9sFp6G2mEBrBpKFqBjYyza1N4thjnM+7wIDAQAB
-----END PUBLIC KEY-----';
$tlCfg->authentication['gitlab']['client_id'] = 'testlink2';
$tlCfg->authentication['gitlab']['client_secret'] = '';


Go to below directory:
/opt/gitlab-1.9.20-9/apps/gitlab/htdocs/lib/functions

and put new folder php-jwt  inside this






************JIRA WITH KEYCLOAK*****************
https://my.atlassian.com/addon/success?type=try&addOnKey=de.codecentric.atlassian.oidc.jira-oidc-plugin&addOnName=Jira+Enterprise+SSO+with+Keycloak&addOnSen=L16801181&licenseId=16801181&parentName=Jira+Core+%28Server%29&referrer=pac&callback=&licensefieldname=

step1:
got ot client -> select client ->select roles tab ->add role ->role name (jira-software-users) 

step2:
Manage -> users ->select roles mapping tab->select client role(jiraSSO) -> add jira-software-users




testsso\7190921(Sbi@12345)    adopt admin
testsso\2973618(Sbi@12345)
testsso\1944231(Sbi@12345)
testsso\2501244(Sbi@12345)
testsso\2974193(Sbi@12345)    developer (gitlab)


if you are facing ssl certificate issue..
git config http.sslVerify "false"

Git global setup
git config --global user.name "Administrator"
git config --global user.email "devops_platform_rcv@mocksmtp.com"


git config --global --unset credential.helper
git config --system --unset credential.helper

to set user name email:
git config --global user.name "Tarunendra Tripathi"
git config --global user.email "admin@example.com"



Create a new repository
git clone https://gitlabpreprod.statebanktimes.in/root/oracledemoapp.git
cd oracledemoapp
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

Existing folder
cd existing_folder
git init
git remote add origin https://gitlabpreprod.statebanktimes.in/root/adopt-service.git
git add .
git commit -m "Initial commit"
git push -u origin master

Existing Git repository
cd existing_repo
git remote rename origin old-origin
git remote add origin https://gitlabpreprod.statebanktimes.in/root/demotestapplication01.git
git push -u origin --all
git push -u origin --tags

CONVERT CRT IN .JKS FORMAT:

openssl pkcs12 -export -in devopspreprod.statebanktimes.in.crt -inkey devopspreprod.statebanktimes.in.key -out devops.p12
keytool -importkeystore -srckeystore devops.p12 \
        -srcstoretype PKCS12 \
        -destkeystore truststore.jks \
        -deststoretype JKS
		
default alias is 1
password is what you set at the prompt

Issue:- 

fatal: unable to access 'https://gitlabuat.statebanktimes.in:8083/root/projectnew.git/': SSL certificate problem: unable to get local issuer certificate

Solution:- git config --global http.sslbackend schannel


git config --global http.sslbackend schannel


***************************************
Git merger command with new brach.
****************************************
Git -------------------------------
git checkout master
git checkout -b "code_merge"

----> copy all above link source file 
 git commit -am 'fortify fix'

git checkout master
git checkout -b "pre_master_merge"

git merge code_merge
git commit -am 'fortify fix'

---------if no issue in the code follow below step---------
git checkout master
git merge pre_master_merge



**********Steps to take changes from master branch to local**************

git switch -c "brachname"
git add .
git commit -m "message"

git checkout master
git add .
git commit -m "message"
git checkout -b "master_bkp"
git checkout master
git pull

if confilict is there fix it after fix you have to below command..
git add .
git commit -m "fixed confilct"

if rebase issue come 

git rebase --continue  (rebse continue this command till reach master brach)

fixed conflict
git add .
git commit -m "fixed_confilct"

git checkout -b "master_colone"
git merger (branchName at the time of switch)
if confict hapen fix it
git checkout master
git merge master_colone
git push




##Ignore the cached and target files.##
git rm -r --cached .
git add .
git commit -m ".fixing gitignore"






In any case gitlab got restarted then you have to add below line in hosts file and restart the services.

#10.191.151.121         testlinkpreprod.statebanktimes.in
#10.191.151.121  devopsservicespreprod.statebanktimes.in



get :    https://devopspreprod.statebanktimes.in/postgres/questionslist/

post:   https://devopspreprod.statebanktimes.in/oracledemo/createquestions/

UI:     https://devopspreprod.statebanktimes.in/oracledemo/welcome/


https://devopspreprod.statebanktimes.in/demo-0.0.1-SNAPSHOT/listQuestion
https://devopspreprod.statebanktimes.in/demo-0.0.1-SNAPSHOT/createquestions


PIPELINE CREATION STEPS WITH ADOPT:

(cred-ids should be same as in the Jenkins file as which is generated in gitlab through adopt and jekins application too)

Add gitlab as cred id in the jenkins (username and password) 

Create API token in gitlab and then add same API token in the jenkins and scm.properties also.

Create cred id in Jenkins as nexus_admin(username eand password)

Create cred id(Secret key) in Jenkins for SonarQube    71da48a75a81b7ee02935c01785681e551a97a77





server.servlet.context-path=/postgres
server.port=8585

spring.mvc.view.prefix=classpath:/templates/
spring.mvc.view.suffix=.html

spring.mvc.static-path-pattern=/resources/**

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
##spring.datasource.url=jdbc:postgresql://10.191.216.227:5454/demoapp1
spring.datasource.url=jdbc:oracle:thin:@10.191.213.53:1545:DEVOPSDB
spring.datasource.username=orasbi
spring.datasource.password=orasbi

# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect =org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle12cDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

Step for API of manul work
******************
Jira:
******************

create a role in gitlab for a particular project
add the role to a user
sync Keycloak roles/groups with jira( login with that user to reflet the sync)
In jira, give project access to that particular group based on role(Login with admin and do the assignment)
(assignUserToJiraGroup() in UserServiceUtil)

UserServiceUtil

********************
gitlab:
********************
Login as admin click on created projects -> setting (left below corner_ ->members -> Choose a role permission	

API documentation url
https://docs.gitlab.com/ee/api/members.html

https://docs.gitlab.com/ee/api/users.html#for-normal-users

request:
GET /users?username=jack_smit

response :
{
    "id": 2,
    "username": "jack_smith",
    "name": "Jack Smith",
    "state": "blocked",
    "avatar_url": "http://gravatar.com/../e32131cd8.jpeg",
    "web_url": "http://localhost:3000/jack_smith"
  }

curl --request POST --header "PRIVATE-TOKEN: <your_access_token>" --data "user_id=1&access_level=30" "https://gitlab.example.com/api/v4/projects/:id/members"

before this login with sso of the particular user.
Sign in with admin then go to project ->setting ->member-> choose rool permission which you want to give


usercreation API for gitlab:

postman url:
https://gitlabpreprod.statebanktimes.in/api/v4/users

body:

 {
        "email": "abc@sbi.co.in",
        "name": "user2",
        "username": "user2",
        "password":"admin123",
        "skip_confirmation":true
}

User creation code in gitlab:
 
private boolean createUserIngitlab(String userName) {
		String restURL = scmPropertiesUtil.getgitlabServerUrl()+"/api/v4/users";
			try {
			
		RestTemplate restTemplate = new RestTemplate();

		HttpHeaders headers = new HttpHeaders();
		String authentication = new String(
				Base64Utils.encode((String.format("%s:%s", "root", "gitlab12345")).getBytes()));
		headers.add("Authorization", "Basic " + authentication);
		headers.add("PRIVATE-TOKEN", "a2rZRPLjZnLk5cxDJRJy");
		headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
		MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
		map.add("email", "abc123@sbi.co.in");
		map.add("name", "Abhishek");
		map.add("username", "Abhishekk");
		
		map.add("password", "Sbi@12345");
		map.add("skip_confirmation", "true");
		HttpEntity<MultiValueMap<String, String>> entity = new HttpEntity<>(map, headers);
		ResponseEntity<String> response = restTemplate.exchange(restURL, HttpMethod.POST, entity, String.class);
		
		return true;
		} catch (Exception exception) {
			System.out.println("******************************");
		exception.printStackTrace();
		// logger.severe(String.format("Webhook creation failed in gitlab SCM Tool due to %s", exception.getMessage()));
		throw exception;
		}
	}
Assign project to particular user:

https://docs.gitlab.com/ee/api/groups.html

https://docs.gitlab.com/ee/api/access_requests.html

https://docs.gitlab.com/ee/api/members.html

POST: https://gitlabpreprod.statebanktimes.in/api/v4/projects/:id/members?user_id=6&access_level=30

user_id: 6  (go to gitlab project and see the user id)
access_level: 30 (bydefaul through post call)
id : 129  (this is project id)



curl --request POST --header "PRIVATE-TOKEN: <your_access_token>" --data "user_id=1&access_level=30" "https://gitlab.example.com/api/v4/projects/:id/members"


gitlab repository path:
/var/opt/gitlab/git-data/repositories/root



***************************
SONARQUBE STEPS:
***************************
to make all project as private in soanarqube 
go to adminstartation ->projects ->Management->click seting icon->edit permission ->click on private radio button 
Login with admin -> administration -> security ->groups - >create new groups (also remove all access from sonar user) -> bydefauls admin don't have all permisions we have to add all permission to  sonar administrator.
go to security -> pemission templates
go to projects -> management ->setting icon -> edit permissions -> give all the permissions to sonar administratior and selected pemission to the particular group which you want to give

go to project permisions -> give permissions to groups -> add users to groups




gitlab:

abhishek maintener
root admin

SONARQUBE
admin 
user1 developer

JIRA





/opt/tomcat/webapps/manager/displayfile

fortify.server.fortiFyScanSourceFile=/opt/tomcat/webapps/manager/displayfile/
fortify.server.fortiFyScandestinationFile=https://devopspreprod.statebanktimes.in/manager/displayfile/




SONAR-SCANNER
********************
/opt/sonar-scanner-4.0.0.1744-linux/conf/sonar-scanner.properties
do the below configuration and put sonar-scanner in jenkins server


#Configure here general information about the environment, such as SonarQube server connection details for example
#No information about specific project should appear here

#----- Default SonarQube server
sonar.host.url=https://sonarqubepreprod.statebanktimes.in
#sonar.host.url=http://10.191.151.100:9100
#----- Default source code encoding
#sonar.sourceEncoding=UTF-8
#sonar.projectKey=ADOPT_PORTAL
#sonar.projectName=ADOPT_PORTAL
#sonar.projectVersion=1.0
#sonar.sources=.
#-Djavax.net.ssl.trustStore=/usr/java/jdk1.8.0_271-amd64/jre/lib/security/cacerts
#-Djavax.net.ssl.keyStore=/usr/java/jdk1.8.0_271-amd64/jre/lib/security/cacerts
sonar.projectKey=ADOPT_PORTAL
sonar.projectName=ADOPT_PORTAL
sonar.projectVersion=1.0
sonar.projectBaseDir=/var/lib/jenkins/workspace/ADOPT_PORTAL
sonar.sources=/var/lib/jenkins/workspace/ADOPT_PORTAL/src/main
sonar.java.binaries=/var/lib/jenkins/workspace/ADOPT_PORTAL/target/test-classes
sonar.tests=/var/lib/jenkins/workspace/ADOPT_PORTAL/src/test/java
~


DATE SYSCH JENKINS KEYCLOAK:

https://medium.com/@kamidu/configure-jenkins-with-high-availability-in-few-minutes-centos-servers-dc88a0458606
https://www.gitlab.org/docs/latest/server_installation/#_clustering


********************************************
REVERSE PROXY FOR SONARQUBE:
********************************************
/opt/sonarqube/conf/sonar.properties
use any port excep what you have to use that you need to use in httpd.conf file.
sonar.web.port=8080

/etc/httpd/conf/httpd.conf
Listen 9100
EnableSendfile on
# Supplemental configuration
#
# Load config files in the "/etc/httpd/conf.d" directory, if any.
IncludeOptional conf.d/*.conf
Header set X-Frame-Options "ALLOW-FROM devopspreprod.statebanktimes.in"
AllowEncodedSlashes NoDecode
    ProxyPreserveHost On
    ProxyPass / http://10.191.151.102:8080/ nocanon
    ProxyPassReverse / http://10.191.151.102:8080/
RequestHeader set X-Forwarded-Proto "https"


go to gitlab realm setting and ->security defences 

X-Frame-Options 
ALLOW-FROM https://devopspreprod.statebanktimes.in/
Content-Security-Policy 
frame-src 'self' * ; frame-ancestors 'self' * ; object-src 'none';
 



Sonrqube Configuration parameter in jenkis to run free style job:
*********************************************************************
sonar.projectKey=ADOPT_SERVICE_LOC
sonar.projectName=ADOPT_SERVICE_LOC
sonar.projectVersion=1.0
sonar.projectBaseDir=/var/lib/jenkins/workspace/$JOB_NAME
sonar.sources=/var/lib/jenkins/workspace/$JOB_NAME/src/main
sonar.java.binaries=/var/lib/jenkins/workspace/$JOB_NAME/target/test-classes
sonar.tests=/var/lib/jenkins/workspace/$JOB_NAME/src/test/java


CHANGE HARDCODED URL FOR GIT AND NEXUS:
binary.groovy
self-service.js
program.jsp

https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-users/#api-rest-api-3-user-email-bulk-get


Api (jira)-sumit
https://community.atlassian.com/t5/Answers-Developer-Questions/How-to-add-users-to-project-roles-with-JAVA/qaq-p/494629
https://community.developer.atlassian.com/t/how-to-grant-permissions-trough-java-api/25738/2






JIRA FREE PLUGIN URL:
https://marketplace.atlassian.com/apps/1216096/sso-for-atlassian-server-and-data-center?hosting=server&tab=overview




jira automatically assign group and project

userController.java

	@PostMapping("/test/{appKey}")
	public UserDetails test(@RequestBody UserDetails userDetails,@PathVariable String appKey ) {
		
		return userService.assignProjectRoleToJira(userDetails, appKey);
	}
	

UserService.java
public UserDetails assignProjectRoleToJira(UserDetails userDetails, String appKey);


userServiceImpl.java
234
	@Override
	public UserDetails assignProjectRoleToJira(UserDetails userDetails, String appKey) {
		// TODO Auto-generated method stub
		userServiceUtil.assignGroupOrUserToProjectRoleInJira(userDetails, appKey);
		return null;
	}
	
userServiceUtil.java
267





api to create group in jira
    
https://docs.atlassian.com/software/jira/docs/api/REST/8.5.13/
​
    
{​​​​​"name": "GroupName"}​​​​​
​
    
	
switch(i.getRoleName){​​​​​
 case "ADMIN":{​​​​​
}​​​​​
}​​​​​
Edited





http://localhost:8888/adopt-services/test/DM2019122586PM2019121763

{
    "roles":[
        {
            "roleName":"Admin"
        }
    ]
}

sonarqube plugin:
https://github.com/flytreeleft/sonar-auth-gitlab-plugin




gitlab API URLS:
https://docs.gitlab.com/ee/api/groups.html

https://docs.gitlab.com/ee/api/projects.html
https://docs.gitlab.com/ee/user/permissions.html

https://docs.gitlab.com/ee/api/access_requests.html

https://docs.gitlab.com/ee/api/members.html




**************plugins***************************
plugins.jenkins.io/role-strategy
Role-based Authorization Strategy
Project-based Matrix Authorization Strategy

https://jenkinspreprod.statebanktimes.in/job/ADOPT/config.xml
create role in gitlab 
assign realm role to specific user 

Jenkins User onboarding url:
https://medium.com/@vishwanathdeedat/jenkins-role-based-access-358936f07af
https://medium.com/@vishwanathdeedat/jenkins-role-based-access-358936f07af
https://plugins.jenkins.io/role-strategy/


in jenkins: 
add below properties 
https://jenkinspreprod.statebanktimes.in/job/ADOPT/config.xml
in code:gitconfig.xml
<hudson.security.AuthorizationMatrixProperty>
<inheritanceStrategy class="org.jenkinsci.plugins.matrixauth.inheritance.InheritParentStrategy"/>
<permission>com.cloudbees.plugins.credentials.CredentialsProvider.Create:appname_Admin</permission>
<permission>com.cloudbees.plugins.credentials.CredentialsProvider.Delete:appname_Admin</permission>
<permission>com.cloudbees.plugins.credentials.CredentialsProvider.ManageDomains:appname_Admin</permission>
<permission>com.cloudbees.plugins.credentials.CredentialsProvider.Update:appname_Admin</permission>
<permission>com.cloudbees.plugins.credentials.CredentialsProvider.View:appname_Admin</permission>
<permission>hudson.model.Item.Build:appname_Admin</permission>
<permission>hudson.model.Item.Build:appname_Dev team</permission>
<permission>hudson.model.Item.Cancel:appname_Admin</permission>
<permission>hudson.model.Item.Configure:appname_Admin</permission>
<permission>hudson.model.Item.Delete:appname_Admin</permission>
<permission>hudson.model.Item.Discover:appname_Admin</permission>
<permission>hudson.model.Item.Move:appname_Admin</permission>
<permission>hudson.model.Item.Read:appname_Admin</permission>
<permission>hudson.model.Item.Read:appname_Dev team</permission>
<permission>hudson.model.Item.Read:appname_Tester</permission>
<permission>hudson.model.Item.Release:appname_Admin</permission>
<permission>hudson.model.Item.Workspace:appname_Admin</permission>
<permission>hudson.model.Run.Delete:appname_Admin</permission>
<permission>hudson.model.Run.Replay:appname_Admin</permission>
<permission>hudson.model.Run.Update:appname_Admin</permission>
<permission>hudson.scm.SCM.Tag:appname_Admin</permission>
</hudson.security.AuthorizationMatrixProperty>

jenkinsimpl.java line no-180
configFile = pipelinePropertiesUtil.modifyConfigFile(scm, url, credId, branch, jenkinsFileRelativePath, project.getProjectName());

pipelinePropertiesAndUtil.java
line no 243:
public File modifyConfigFile(String scm, String url, String credId, String branch, String relativePathToConfigFile, String projectName)
			throws FileNotFoundException {
			
			

//permissions
NodeList permissionNode = doc.getElementsByTagName("permission");
for(int i=0;i<permissionNode.getLength();i++) {
Node node = permissionNode.item(i);
String textContent=node.getTextContent().replace("appname", projectName);
node.setTextContent(textContent);
}
//

gitlab*******


https://gitlabpreprod.statebanktimes.in/root/adopt-portal.git








a2-af4e-d90809da095c
groupRequestObject{"clientRole":true,"composite":false,"name":"Jio Pay Participation for Card Payment MIGRATED_Dev team","description":"TODO: add description here","id":"7a9f0c85-d4cb-4a47-bfd8-520bbc62d031","containerId":"Adopt"}
groupRequestArray[{"clientRole":true,"composite":false,"name":"Jio Pay Participation for Card Payment MIGRATED_Dev team","description":"TODO: add description here","id":"7a9f0c85-d4cb-4a47-bfd8-520bbc62d031","containerId":"Adopt"},{"clientRole":true,"composite":false,"name":"jira-software-users","description":"TODO: add description here","id":"fb48dce0-2d8b-40ec-bba3-8b643e9069cc","containerId":"Adopt"}]
2021-04-20 19:05:38.249  INFO 15323 --- [nio-9090-exec-2] c.t.adopt.services.impl.UserServiceImpl  : Create Group in jira:
e.getLocalizedMessage()400 null
net.sf.json.JSONException: 400 null
        at com.techm.adopt.services.impl.UserServiceImpl.createGroupInJira(UserServiceImpl.java:751)
        at com.techm.adopt.services.impl.UserServiceImpl.createAndAssignRoleForJira(UserServiceImpl.java:1047)
        at com.techm.adopt.services.impl.UserServiceImpl.assignRoleProject(UserServiceImpl.java:996)
        at com.techm.adopt.controllers.UserController.assignRoleProject(UserController.java:253)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)




Keshav Kumar Thekepat
7190921@testsso.com


7190921@testsso.com
1944231@testsso.com
2973618@testsso.com
2974193@testsso.com
1@testsso.com
3@testsso.com
2501244@testsso.com
6176275@testsso.com
8388210@testsso.com
6227589@testsso.com
abhishek
6261892@testsso.com
6717594@testsso.com
5248124@testsso.com
2@testsso.com
4@testsso.com
8388962@testsso.com
user1
509024@testsso.com
6227503@testsso.com
tarunendratripathi
5003822@testsso.com


delete user details from below tables.

role_user
module_user
role_module

AAABkw0ODAoPeNqVUltr2zAUftevEOxx2PUldbOAYJntMrdxvMXpHkpgnCinkWZHViW5afbr56RkN
xisD4IjzvluOnpTdopOtaFRQoN4EkWTIKJptqRREIWkwcMXNFZ2ioVJEFwF4zgOybzfrdFUD3d26
DEvJGmnHHA3hx0yWAtpBTZfm96KPQjwHXKxe2/X0uedLxX51BsuwGIGDtlRxgtGXpSQmeSoLC4PG
k9MaVWW+SItprNzK3/W0hx+w10ecRsciDc4TDgjuQ+uBWslKL+TG+5/kwa8Y+Xptt9K5dcOjEPDH
qC1eLaelyDb//D+Sq2BWT4hc6ZH0r5k+AhWsDLdp9e5e3uPj3eF+hzz61uRVDfLMjOjx+a+mIpFN
XouRt8TiLVaaH1R9LNxp5dZfTHertiKkcGwcqhA8X88S53P2XC8WXgVvIsvkzGpzBaUtOCO+6w/F
CQ1eLr8vYlXphzG0Ggj7Z9Jzz8nIhlabqQ+6d4MaJr/RNC6ruheOkFv8cDbDprVhOZP0PYnZ+RX+
cL9AxU76/UwLAIUQpHpUQHKQKsYSVuVYH4J/gGVa8MCFFR7m/klEaALQY62d3Vp1wp3T9dQX02jf



JSON INJECTION
RestClientImpl.java 225
String response = JsonSanitizer.sanitize(restTemplate.getForObject(url, String.class));



https://jenkinspreprod.statebanktimes.in/descriptorByName/hudson.security.ProjectMatrixAuthorizationStrategy/checkName?value=%5Buser1%5D
https://jenkinspreprod.statebanktimes.in/descriptorByName/hudson.security.ProjectMatrixAuthorizationStrategy/checkName?value=%5Buser1%5D




git config --get remote.origin.https://gitlabpreprod.statebanktimes.in


gitlab NAVEEN
https://github.com/viglesiasce/gitlab/blob/master/config.inc.php
https://www.programmersought.com/article/60636409245/

****************************
gitlab mysql :
*****************************

https://bitnami.com/stack/gitlab/README.txt
admint user will be root and password will be default admin password while you have kept at the time of installation

mysql -h 127.0.0.1 -P 3306 -u root -p
pass:test123


if your are using non-root user then you have to user bitnami as password.
pass:bitnami
 
 
//vim /etc/hosts.allow
/etc/hosts.allow
mysqld: ALL : ALLOW
mysqld-max: ALL : ALLOW

take complete mysql backup:

mysqldump -u root -p --opt --all-databases -r backup.sql
mysqldump -u root -p --opt --all-databases > alldb.sql
mysqldump -u root -p --all-databases --skip-lock-tables > alldb.sql
mysqldump -u root -p --all-databases > alldb.sql

**************************************
DOT NET APPLICATION CICD PIPELINE:
**************************************
pipeline {
agent {label 'Jenkins_windows_slave'}
 environment {
 dotnet = 'C:\\Program Files\\dotnet\\dotnet.exe'
 //def msbuild = " 'C:\\Program Files (x86)\\MSBuild\\14.0\\Bin\\msbuild.exe'
 def msbuild = "\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\""
 //appname = 'F:\\Jenkins_slave_machine\\workspace\\DotNet_Bot\\Microsoft.Bot.Builder.sln'

 }
stages {
stage ('Checkout') {
            steps {
                 git url: 'https://gitlabpreprod.statebanktimes.in/root/dotnetapptest.git',branch: 'master'
            }
}

stage('Clean') {
      steps {
            bat 'dotnet clean'
       }
    }


/*
stage ('Restore PACKAGES') {     
         steps {
    //         bat "dotnet dev-certs https --trust"
bat "dotnet dev-certs https --check"

bat "dotnet dev-certs https"

//bat "dotnet dev-certs https --trust"

             //bat "dotnet restore --configfile NuGet.Config"
             bat "dotnet restore"
          }
        }
*/

stage('Build') 
{ steps 
	{ echo 'Building..' 
		//bat "\"C:\\Program files (x86)\\Microsoft visual studio\\2017\\Buildtools\\msbuild\\15.0\\bin\\msbuild.exe\"" 
		//bat "\"C:\\Program Files (x86)\\MSBuild\\14.0\\Bin\\msbuild.exe\" WebApplication1.sln
	   //bat "${msbuild} Microsoft.Bot.Builder.sln /p:Configuration=Debug"
	  //bat "\"C:\\Program Files (x86)\\MSBuild\\14.0\\Bin\\msbuild.exe\" WebApplication1.sln /p:Configuration=Release /maxcpucount"
	   bat "\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\" WebApplication1.sln /p:Configuration=Release /maxcpucount"
	
	
			
	} 
}
 }
}

*************************************************************************************************************************

Change the below line in:F:\Jenkins_slave_machine\workspace\DotNet_Bot\WebApplication1/WebApplication1.vbproj

<Import Project="$(VSToolsPath)\WebApplications\Microsoft.WebApplication.targets" Condition="Exists('$(VSToolsPath)\WebApplications\Microsoft.WebApplication.targets')" />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\WebApplications\Microsoft.WebApplication.targets" Condition="false" />
  
if user permission is gettign while deploying the application follow the below steps.

go to the dotnet app in IIS server ->right click on app ->deploy ->configure web deploy and publicing ->setup
the user will be automatically get permission access

  
For window curl command download:

https://curl.se/windows
https://curl.se/docs/sslcerts.html
curl-7.76.1-win64-mingw

and put certificate in bin folder:
C:\CurlWindowds\curl-7.76.1-win64-mingw\bin
curl-ca-bundle.crt (rename your certificate (.crt)in the given name)

**********************
IIS SERVER:
******************

gpedit :to check remote shell is enable or not
search bar type server manager to enable iis server 

TO ENABLE IIS SERVER SET PATH:
https://stackoverflow.com/questions/30901434/iis-manager-in-windows-10
Go to System -> Advanced System Settings -> Advanced -> Environment Variables -> Machine or User and add the following entry to the end, or append to the existing, separating with a semi-colon
C:\Windows\System32\inetsrv
After closing and opening your shell, you should now be able to access inetmgr from the command line.

power shell:
inetmgr


Get-WindowsFeature *Web*
And if it is missing just quickly add this via the following command:

Add-WindowsFeature Web-Mgmt-Console

DEPLY DOT NET APPLCIATION ON IIS SERVER
Setp:
publish the application 
then create user ISUR and give the full permission to user
click->directory and browsing ->enable
then reght click->right click application -> manage browing -> start/stop/browse

https://www.oreilly.com/library/view/windows-server-cookbook/0596006330/ch12s03.html

to reset you all iis services:
iisreset





************************************************
gitlab WITH POSTGRES SQL: switch database
************************************************

1. First, create a database gitlab on the database server

2. Modify the database configuration of gitlab


step1:create user and schema and give all permission to him

CREATE USER gitlab WITH PASSWORD 'gitlab';
CREATE DATABASE gitlab WITH ENCODING 'UNICODE' LC_COLLATE 'C' LC_CTYPE 'C' TEMPLATE TEMPLATE0;
GRANT CONNECT ON DATABASE gitlab TO gitlab;
GRANT USAGE ON SCHEMA public TO gitlab;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO gitlab;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO gitlab;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO gitlab;
GRANT ALL PRIVILEGES ON DATABASE gitlab TO gitlab;
ALTER USER gitlab CREATEDB;
ALTER USER gitlab WITH SUPERUSER; 

ALTER DEFAULT PRIVILEGES FOR USER gitlab IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO gitlab;




vim /opt/lampp/htdocs/gitlab/config_db.inc.php 

 1 <?php                                                                                                                                                                                                   
  2 // Automatically Generated by gitlab Installer
  3 //define('DB_TYPE', 'mysql');
  4 //define('DB_USER', 'gitlab');
  5 //define('DB_PASS', 'gitlab');
  6 //define('DB_HOST', '127.0.0.1');
  7 //define('DB_NAME', 'gitlab');
  8 //define('DB_TABLE_PREFIX', '');
  9 
 10 define('DB_TYPE', 'mysql');
 11 define('DB_USER', 'db');
 12 define('DB_PASS', 'rc6g012348q4mfxzv');
 13 define('DB_HOST', 'mysq.haha.com:27260');
 14 define('DB_NAME', 'gitlab');
 15 //define('DB_PORT', '27260');
 16 

3. Enter the gitlab mysql script directory

/opt/lampp/htdocs/gitlab/install/sql/mysql







*********************************************************
 JMETER SCRIPT: with jenkins
**********************************************************
https://stackoverflow.com/questions/51839660/how-to-run-jmeter-test-through-remote-servers-via-jenkins


 performance.hpi file - put into Jenkins - Plugins folder    Restart Jenkins You can also install this plugin form Jenkins - Plugin Manager. Step 1 : Goto Jmeter/bin    user.properties - add line :    jmeter.save.saveservice.output_format=xml
 Step 2 : Create a Jmeter test
 Step3 : Run JMeter test from command line:
 
 sh /opt/apache-jmeter-5.4/bin/jmeter -Jjmeter.save.saveservice.output_format=xml -n -t /opt/apache-jmeter-5.4/bin/BeanShellSampler.jmx -l /home/jmeter_report/TestResult1.jtl
 
 Step 4 : Add a job in Jenkins - add jmeter commands in build step 
 Step 5 : Add post build action - publish performance test reports
 Step 6 : Run and validat 

working script for jmeter:
stage('Performance Testing'){
		                   steps{ 
                      						   
		                   sh '/opt/apache-jmeter-5.4/bin/jmeter -Jjmeter.save.saveservice.output_format=xml -n -t /opt/apache-jmeter-5.4/bin/BeanShellSampler.jmx -l /home/jmeter_report/TestResult1.jtl'
						   perfReport filterRegex: '', sourceDataFiles: '/home/jmeter_report/TestResult1.jtl'
		            }
		
		}
jmeter -n -t BeanShellSampler.jmx
./jmeter -n -t BeanShellSampler.jmx


GROOVY SCRIPT COMPILER:

https://www.tutorialspoint.com/execute_groovy_online.php

###############
RSYNC
##############


synch complete folder from one server to remote server the will be remote serever

rsync -azvhe ssh /tmp/backup/ root@10.191.151.99:/tmp/backup/

rsync -avP ssh /tmp/backup/ root@10.191.151.99:/tmp/backup1/

rsync -avP --del /tmp/backup/ root@10.191.151.99:/tmp/backup1/

sync with include files or dir:

rsync -avP --exclude={'file1.txt','file2.txt','ssl_cert'} ssh /tmp/backup/ root@10.191.151.99:/tmp/backup1/


If you want to exclude multple file or directory just write all files and dirs to a txt file and pass as a arument

rsync -avP --exclude-from='exclude-from.txt' ssh /tmp/backup/ root@10.191.151.99:/tmp/backup1/


original script:
rsync -avP --include-from='include.txt' --exclude '*' ssh /opt/ root@10.191.151.99:/tmp/backup1/

rsync -avzhe --include-from='include.txt' --exclude '*' -e ssh /opt/ root@10.191.151.99:/tmp/backup1/



include.txt create in /opt/folder from where you want to sync data.



rsync -azvhe --include={'nexus','sonatype-work'} ssh /tmp/backup/ root@10.191.151.99:/tmp/backup/


success command:
rsync -avP  --include='nexus/***' --include='sonatype-work/***' --exclude='*' --recursive ssh /opt/ root@10.191.151.99:/tmp/backup/



*********************************************
HOW TO INSTALL RSYNC ON RHEL
*********************************************
https://www.cubebackup.com/blog/automatic-backup-linux-using-rsync-crontab/#:~:text=The%20rsync%20command%20is%20a,weight%20and%20effective%20backup%20solution.

https://blog.sonatype.com/2010/01/how-to-backup-nexus-configuration-and-repository-artifacts/



https://www.tecmint.com/rsync-local-remote-file-synchronization-commands/

https://support.sonatype.com/hc/en-us/articles/360010352014-Moving-a-Nexus-Repo-3-Installation-to-a-New-Location


It efficiently copies and sync files to or from a remote system.
Supports copying links, devices, owners, groups and permissions.
It’s faster than scp (Secure Copy) because rsync uses remote-update protocol which allows to transfer just the differences between two sets of files. First time, it copies the whole content of a file or a directory from source to destination but from next time, it copies only the changed blocks and bytes to the destination.
Rsync consumes less bandwidth as it uses compression and decompression method while sending and receiving data both ends.

basic command
# rsync options source destination

Step1:install rsync on rhel
# yum install rsync

step2:Copy a Directory from Local Server to a Remote Server
#rsync -avz rpmpkgs/ root@10.191.151.99:/home/



Step3:Copy/Sync a Remote Directory to a Local Machine

rsync -avzh root@10.191.151.99:/home/tarunika/rpmpkgs /tmp/myrpms

Step4:Copy a File from a Remote Server to a Local Server with SSH
rsync -avzhe ssh root@10.191.151.99:/root/install.log /tmp/

Copy a File from a Local Server to a Remote Server with SSH
rsync -avzhe ssh backup.tar root@10.191.151.99:/backups/

step5:Show Progress While Transferring Data with rsync
rsync -avzhe ssh --progress /home/rpmpkgs root@10.191.151.99:/root/rpmpkgs

step6: Use of –include and –exclude Options
rsync -avze ssh --include 'R*' --exclude '*' root@192.168.0.101:/var/lib/rpm/ /root/rpm

Step7:Use of –delete Option
rsync -avz --delete root@192.168.0.100:/var/lib/rpm/ .


stpe8:Set the Max Size of Files to be Transferred
rsync -avzhe ssh --max-size='200k' /var/lib/rpm/ root@192.168.0.100:/root/tmprpm

step9:Automatically Delete source Files after successful Transfer
rsync --remove-source-files -zvh backup.tar /tmp/backups/

step10:Do a Dry Run with rsync
rsync --dry-run --remove-source-files -zvh backup.tar /tmp/backups/

step11:Set Bandwidth Limit and Transfer File
rsync --bwlimit=100 -avzhe ssh  /var/lib/rpm/  root@192.168.0.100:/root/tmprpm/

****************************************
HOW TO MAKE TWO SERVER PASSWORD LESS:
****************************************
ssh-keygen

scp /root/.ssh/id_rsa.pub  root@10.191.29.17:/root/id_rsa.pub
 mkdir -p /root/.ssh
 chmod 700 /root/.ssh
 touch /root/.ssh/authorized_keys
 chmod 600 /root/.ssh/authorized_keys
 
cat /root/id_rsa.pub >> /root/.ssh/authorized_keys

to enable crontab -e
 crontab -u root -e
 crontab -u root -l
 crontab .u root .e
 crontab -u root -e

#############################
JENKINS HA CONFIGURATION
#############################

https://medium.com/@yogeshsurapaneni/jenkins-ha-setup-168ce26bdb89

#################################
CREATE A CLUSTER FOR POSTGRESQL
#################################

Step1:go to bin directory of postgres where you have install
Step2:Create a folder where you want to create a cluster
Step3:Run the below command to create a cluster
go to bin
initdb -D /opt/cluster1/ -U postgres -W

-W meanse your password will be prompted and can change for postgresql cluser

make sure your all cluser will run on different port.
port can not be same for each cluster.

step4:how to connect to cluster:

psql -p 5454 -d postgres(database name) -U postgres

Step5:start the cluster:

pg_ctl -D /opt/cluster1 start

Step6:for date replication
first you have to run db as WAL mod
postgresql.conf
.WAL_LEVER=replication
.Archive_mode=on

copy cluster backup to remote side
pg_backup or hot backup method to be used

how WAL file will be transffred  from primary to stand by:
archive_command='scp%p user@serverip:/path/%f'
archive_command='ftp%p user@serverip:/path/%f'


How to apply in stand by site
create a file in cluster folder
recovery.conf
standby_mode=on
restore_command="cp /dbpostgres/archive%f %p"

9.0 postgres there in no any cp command and wal file need to be copy here background process is running
 which is checking every changes in primary server will automatically reflected to stand by sever.
 
 in primary server
 postgres.conf
 WAL_LEVEL=replica
 Archive_mod=on
 max_wal_senders=5
 wal_keep_segments=100
 
 pg_hba.conf
 host replication postgres 10.191.151.54/34 trust
 
 in standby server
 recovery.conf
 standby_mode=on
 primary_conninfo='host=10.191.151.5 port=5454 user=postgres password=psel'

***********
ANSIBLE
***********
/etc/ansible
/home/ansible
/opt/git_repository/ansible
/opt/ansible
/var/spool/mail/ansible
/usr/bin/ansible
/usr/lib/python2.7/site-packages/ansible
/usr/share/doc/vdo/examples/ansible
/usr/share/ansible

go to below directory and create inventory inside that create inventory file:
/opt/ansible/inventories/
devops this is the file name 
[devops]                           
10.189.251.209  
10.191.218.102
10.191.151.95
10.191.151.101
10.191.151.98
10.191.151.96
10.191.151.99
10.191.151.102
10.191.151.100
10.191.151.94
10.191.151.97
10.191.151.104
10.191.213.55
10.191.213.54
10.191.213.53
10.191.151.115
10.191.151.120
10.191.151.122
10.191.151.121
10.191.151.124
10.191.151.117
10.191.151.118
10.191.151.116
10.191.151.123
10.191.151.119
10.191.218.108

[linux]
10.189.251.209
10.191.218.102
10.191.151.95
10.191.151.101
10.191.151.98
10.191.151.96
10.191.151.99
10.191.151.102
10.191.151.100
10.191.151.94
10.191.151.97
10.191.151.104
10.191.213.55
10.191.213.54
10.191.213.53
10.191.151.115
10.191.151.120
10.191.151.122
10.191.151.121
10.191.151.124
10.191.151.117
10.191.151.118
10.191.151.116
10.191.151.123
10.191.151.119

[windows]
10.191.151.103

[linux_no_ansible]
10.189.251.209
10.191.218.102
10.191.151.95
10.191.151.101
10.191.151.98
10.191.151.96
10.191.151.99

create one file with name firewall:
R0ETADVOPSWP001=9090/tcp,8287/tcp,6565/tcp,22/tcp,443/tcp
R0ETADVOPSWP002=9090/tcp,8087/tcp,6565,tcp,22/tcp,443/tcp
R0ETADVOPSAP001=8087/tcp,6565/tcp,22/tcp,8085/tcp,443/tcp
R0ETADVOPSAP002=8087/tcp,6565/tcp,22/tcp,8085/tcp,443/tcp
R0ETADVOPSAP003=8087/tcp,6565/tcp,22/tcp,8083/tcp,443/tcp
R0ETADVOPSAP004=8087/tcp,6565/tcp,22/tcp,8082/tcp,443/tcp
R0ETADVOPSAP005=8087/tcp,6565/tcp,22/tcp,8082/tcp,443/tcp
R0ETADVOPSAP006=8087/tcp,6565/tcp,22/tcp,9100/tcp,443/tcp
R0ETADVOPSAP007=8087/tcp,6565/tcp,22/tcp,9100/tcp,443/tcp
R0ETADVOPSAP008=8087/tcp,22/tcp
R0ETADVOPSAP009=8087/tcp,8089/tcp,22/tcp,443/tcp
#R0ETADVOPSAP010=8087/tcp,6565/tcp,22/tcp,4444/tcp
R0ETADVOPSAP011=8087/tcp,6565/tcp,22/tcp,5555/tcp
R0ETADVOPSDP001=8087/tcp,5454/tcp,22/tcp
R0ETADVOPSDP002=8087/tcp,5454/tcp,22/tcp
R0ETADVOPSDP003=8087/tcp,1545/tcp,22/tcp
R0ETADVOPSAP022=8087/tcp,6565/tcp,22/tcp,50000/tcp,8081/tcp,443/tcp
R0ETADVOPSAP023=8087/tcp,6565/tcp,22/tcp,50000/tcp,8081/tcp,443/tcp
R0ETADVOPSAP024=8087/tcp,6565/tcp,22/tcp,3333/tcp,1090/tcp,443/tcp
R0ETADVOPSAP025=8087/tcp,6565/tcp,22/tcp,9090/tcp,1307/tcp,443/tcp
R0ETADVOPSAP026=8087/tcp,6565/tcp,22/tcp,9090/tcp,1307/tcp,443/tcp
R0ETADVOPSAP027=8087/tcp,6565/tcp,22/tcp,8086/tcp,161/udp,162/udp,443/tcp
R0ETADVOPSAP028=8087/tcp,6565/tcp,22/tcp,8086/tcp,161/udp,162/udp,443/tcp
R0ETADVOPSAP029==8201/tcp,22/tcp,22/tcp,443/tcp
R0ETADVOPSAP030=9200/tcp,5062/tcp,,22/tcp,443/tcp
R0ETADVOPSAP031=5602/tcp,22/tcp,443/tcp


go to below directory and create playbook:

/opt/ansible/playbooks/devops
- hosts: 10.191.159.48
  tasks:
  - name: download artifacts from nexus
    become: true
    get_url:
     url: https://nexusdev.statebanktimes.in:8081/repository/jenkins-rel/com/example/postgres-demo/0.0.{{build}}/postgres-demo-0.0.{{build}}.jar
     dest: /opt/tomcat/webapps
    environment:
          no_proxy: nexusdev.statebanktimes.in

***playbook****

---
- hosts: all
  remote_user: ansible
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh
  vars:
    password: appadmin
  tasks:

    - name: Add group "techm_dev" to remote server
      group:
        name: techm_dev
        gid: 3001
        state: present

    - name: Add user "appadmin " to remote server
      user:
        name: appadmin
        password: "{{ password | password_hash('sha512') }}"
        comment: "TECHM DEVELOPERS"
        uid: 3001
        group: techm_dev
        append: yes
        shell: /bin/bash

    - name: Copy a new "sudoers" file into place, after passing validation with visudo
      copy:
        src: /opt/ansible/data/os/sudoers
        dest: /etc/sudoers
        validate: /usr/sbin/visudo -csf %s
		
		
A play is an ordered set of tasks which should be run against hosts selected from your inventory.

A playbook is a text file that contains a list of one or more plays to run in order.



*********************************************************
HOW TO SEE DOMAIN NAME AND IP FOR PROVIDED CERTIFICATE:
**********************************************************n
https://www.xolphin.com/decoder

jira.statebanktimes.in sonarqube.statebanktimes.in jenkins.statebanktimes.in jmeter.statebanktimes.in nexus.statebanktimes.in gitlab.statebanktimes.in elkapm.statebanktimes.in kibana.statebanktimes.in nagios.statebanktimes.in gitlab.statebanktimes.in keycloak.statebanktimes.in devopsservices.statebanktimes.in elkcluster.statebanktimes.in R0ETADVOPSWP001 R0ETADVOPSWP002 R0ETADVOPSAP001 R0ETADVOPSAP002 R0ETADVOPSAP003 R0ETADVOPSAP004 R0ETADVOPSAP005 R0ETADVOPSAP006 R0ETADVOPSAP007 R0ETADVOPSAP008 R0ETADVOPSAP009 R0ETADVOPSAP010 R0ETADVOPSAP011 R0ETADVOPSDP001 R0ETADVOPSDP002 R0ETADVOPSDP003 R0ETADVOPSAP022 R0ETADVOPSAP023 R0ETADVOPSAP024 R0ETADVOPSAP025 R0ETADVOPSAP026 R0ETADVOPSAP027 R0ETADVOPSAP028 R0ETADVOPSAP029 R0ETADVOPSAP030 R0ETADVOPSAP031 R0ETADVOPSWP004 10.189.251.209 10.191.218.102 10.191.151.95 10.191.151.101 10.191.151.98 10.191.151.96 10.191.151.99 10.191.151.102 10.191.151.100 10.191.151.94 10.191.151.97 10.191.151.103 10.191.151.104 10.191.213.55 10.191.213.54 10.191.213.53 10.191.151.115 10.191.151.120 10.191.151.122 10.191.151.121 10.191.151.124 10.191.151.117 10.191.151.118 10.191.151.116 10.191.151.123 10.191.151.119 10.191.218.108 10.191.146.35 10.191.146.36 10.191.146.37 10.191.146.38 10.191.146.39 10.191.146.40 10.191.146.41 10.191.148.221


"http_proxy=http://10.191.218.108:3128
https_proxy=http://10.191.218.108:3128
"

*****TERRAFORM**********************


terraform tutorials:

https://geekflare.com/terraform-for-beginners/

Below are some of the benefits of using Terraform.

.Does orchestration, not just configuration management
.Supports multiple providers such as AWS, Azure, GCP, DigitalOcean and many more
.Provide immutable infrastructure where configuration changes smoothly
.Uses easy to understand language, HCL (HashiCorp configuration language)
.Easily portable to any other provider
.Supports Client only architecture, so no need for additional configuration management on a server

Terraform Core concepts
Below are the core concepts/terminologies used in Terraform:

Variables: Also used as input-variables, it is key-value pair used by Terraform modules to allow customization.
Provider:    It is a plugin to interact with APIs of service and access its related resources.
Module:      It is a folder with Terraform templates where all the configurations are defined
State:       It consists of cached information about the infrastructure managed by Terraform and the related configurations.
Resources: It refers to a block of one or more infrastructure objects (compute instances, virtual networks, etc.), which are used in configuring and managing the infrastructure.
Data Source: It is implemented by providers to return information on external objects to terraform.
Output Values: These are return values of a terraform module that can be used by other configurations.
Plan: It is one of the stages where it determines what needs to be created, updated, or destroyed to move from real/current state of the infrastructure to the desired state.
Apply: It is one of the stages where it applies the changes real/current state of the infrastructure in order to move to the desired state.


Terraform Lifecycle
Terraform lifecycle consists of – init, plan, apply, and destroy.

terraform lifecycle - geekflare


How Terraform Works?
Terraform has two main components that make up its architecture:

Terraform Core
Providers



Provision AWS EC2 Instance Using Terraform
In this demo, I am going to launch a new AWS EC2 instance using Terraform.

Create a working directory for this Terraform demo.

Step1:
geekflare@geekflare:~$ mkdir terraform_demo

geekflare@geekflare:~$ cd terraform_demo/
geekflare@geekflare:~/terraform_demo$ gedit awsec2.tf

provider "aws" {
access_key = "B5KG6Fe5GUKIATUF5UD"
secret_key = "R4gb65y56GBF6765ejYSJA4YtaZ+T6GY7H"
region = "us-west-2"
}

resource "aws_instance" "terraform_demo" {
ami = "ami-0a634ae95e11c6f91"
instance_type = "t2.micro"
}
Note: I have changed the access and secret keys 😛, you need to use your own.

Step:2
 terraform init
Now, the first step is to initialize terraform.

geekflare@geekflare:~/terraform_demo$ terraform init

Initializing the backend...

Step3:
terraform plan
Next is the plan stage; it will create the execution graph for creating and provisioning the infrastructure.
geekflare@geekflare:~/terraform_demo$ terraform plan

Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

Step4:
terraform apply
The apply stage will execute the configuration file and launch an AWS EC2 instance. When you run apply command, it will ask you, “Do you want to perform these actions?”, you need to type yes and hit enter.

geekflare@geekflare:~/terraform_demo$ terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
+ create

Terraform will perform the following actions:
Go to your AWS EC2 dashboard, and you will see a new instance with the instance id mentioned at the end of apply command has been created.

Initializing provider plugins...
- Using previously-installed hashicorp/aws v3.2.0

*********DOCKER-COMPOSE*********
Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. To learn more about all the features of Compose, see the list of features.

DIFFERENCE BETWEEN DOCKER COMPOSE AND DOCKER SWARM
Docker Compose is used for configuring and starting multiple Docker containers on the same host--so you don't have to start each container separately. Docker swarm is a container orchestration tool that allows you to run and connect containers on multiple hosts

docker compose support .yml and json format files 

docker-compose up (create container with network)
docker-compose down  (remove container include network )
docker-compose down --volume (it will delete the volume too -d meanse it will run in background)

docker-compose -f dockerdev.yml  (command for cusome compose.yml file command deful docker-compose.yml this is defaul file name)
doker container ls
docker container ls -a 
docker container network

docker-compose --helper
docker-compose create
docker container rm
docker-compose stop  (do not wrok with network because it will not stop netwerk)
docker-compose start (start but network will not be created)
docker-composer rm    (remove container)



docker-compose image (show all images)
docker-compse ps  (show availabe container)
docker-compse pause (pause the container)
docker-compose unpause (to resume docker container)

docker-compose kill (to kill the running conatiner)
docker-compose port webapp1 80 (port 80 is mapped with which container port)
docker-compose logs -f (to see all live logs)
docker-compose ps
docker-compose exec webapp1 ls
docker-compose run webapp1 ls 
docker-compose restart
docker-compose pull
docker-compose push
docker-compose version


to scale your application
docker-compose scale webapp1=4 webapp2=2
docker-compose down
docker-compose up -d
docker-compose top (to show running conatiner

RUN executes command(s) in a new layer and creates a new image. E.g., it is often used for installing software packages.
CMD sets default command and/or parameters, which can be overwritten from command line when docker container runs.
ENTRYPOINT configures a container that will run as an executable



#share container from one container to other container
docker run -it --name container1 --previlaged=true -volumesfrom container2 ubuntu bin/bash
 
#create new volume in container
docker run -it --name container3 -v /volume2 ubuntu bin/bash

#build the image from docker file and tag the it
docker build -t myimage:1.0
docker image ls
docker image rm alpine:3.4

#run the conatiner from alpine version 3.9 and expose the port 5000 exterbally mapped the port inside the container
docker container run --name web -p 5000:80 alpine:3.9
stop container 
docker container stop web (SIGTERM stop the container)
docker container kill web (SIGKILL the running container)
docker network ls (list the network)


#pull the image from registery
docker pull myimage:1.0
#retag the local image with new image
docker tag myimage:1.0 myrepo/myimage:2.0
#push the image to public regitery
docker push myrepo/myimage:2.0
#list the all running container usr --all 
docker container ls 
#delete all running as well as stoped container 
docker container rm -f $(docker ps -aq)
#print the last 100 line of docker log
docker container log --tail 100 web










https://docker-curriculum.com/


# start from base
FROM ubuntu:18.04

MAINTAINER Abhishek kushwaha <abhishekranjan614@gmail.com>

# install system-wide deps for python and node
RUN apt-get -yqq update
RUN apt-get -yqq install python3-pip python3-dev curl gnupg
RUN curl -sL https://deb.nodesource.com/setup_10.x | bash
RUN apt-get install -yq nodejs

# copy our application code
ADD flask-app /opt/flask-app
WORKDIR /opt/flask-app

# fetch app specific dependancies
RUN npm install
RUN npm run build
RUN pip3 install -r requirements.txt

# expose port
EXPOSE 5000

# start app
CMD [ "python3", "./app.py" ]


###nameSpace
Namespaces are Kubernetes objects which partition a single Kubernetes cluster into multiple virtual clusters. Each Kubernetes namespace provides the scope for Kubernetes Names it contains; which means that using the combination of an object name and a Namespace, each object gets an unique identity across the cluster




#FORWARD PROXY:
A forward proxy is the most common form of a proxy server and is generally used to pass requests from an isolated, private network to the Internet through a firewall. Using a forward proxy, requests from an isolated network, or intranet, can be rejected or allowed to pass through a firewall.

#REVERSE PROXY:
A reverse proxy ultimately forwards user/web browser requests to web servers. However, the reverse proxy server protects the web server's identity. This type of proxy server also moves requests strategically on behalf of web servers, typically to help increase performance, security, and reliability.

#what is SCA static code analysis:
Static code analysis is a method of debugging by examining source code before a program is run. It's done by analyzing a set of code against a set (or multiple sets) of coding rules.

Static analysis, also called static code analysis, is a method of computer program debugging that is done by examining the code without executing the program. The process provides an understanding of the code structure and can help ensure that the code adheres to industry standards.


###APSEC CONFIGURATION IN httpd.conf######

# Load config files in the "/etc/httpd/conf.d" directory, if any.
IncludeOptional conf.d/*.conf
#Header always set Access-Control-Allow-Origin "*"
Header always set Access-Control-Allow-Origin "https://nagios.statebanktimes.in/nagios/"
Header set X-Frame-Options: "SAMEORIGIN"
#Header set X-Frame-Options "ALLOW-FROM *.statebanktime.in"
Header set Content-Security-Policy "default-src 'self';"
#Header set Content-Security-Policy "default-src 'self'  'unsafe-inline' ; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://nagiospreprod.statebanktimes.in"
Header set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
Header always set X-XSS-Protection "1;  mode=block"
TraceEnable Off
#Header set Set-Cookie HttpOnly;Secure
Header set Set-Cookie  NagFormId=C394B82074BDAB5D06EA29B9F2A9E151;HttpOnly;Secure;SameSite=Strict;

ServerSignature Off
ServerTokens Prod
Header unset Server


Header set Cache-Control "no-cache, no-store, must-revalidate"
Header set Pragma "no-cache"
Header set Expires 0
Header set SessionExpiryUpdateInterval 2
Header set SessionMaxAge 2


************APPSEC ISSUE*********************
/opt/tomcat/webapps/ROOT/error/error.html





/opt/tomcat/webapps/examples/WEB-INF/web.xml

ACCESS DENIED JSP:
/opt/tomcat/webapps/manager/WEB-INF/jsp

/opt/tomcat/webapps/host-manager/WEB-INF/jsp







add in web.xml opt/tomcat/conf/web.xml

<cookie-config>
<http-only>true</http-only>
<secure>true</secure>
</cookie-config>




/opt/apache-tomcat-9.0.39/conf/contex.xml
<CookieProcessor className="org.apache.tomcat.util.http.LegacyCookieProcessor" sameSiteCookies="strict" />



<Context>
   <CookieProcessor sameSiteCookies="strict" />
</Context>


to solve APPSEC ISSUE:


https://support.ptc.com/help/thingworx_hc/thingworx_8_hc/en/index.html#page/ThingWorx/Help/Composer/Security/customizing_the_cache_control_header.html


11. point in appsec issue

filter>
  <description>Sets various HTTP Response Headers in order to increase security, etc.</description>
  <filter-name>HttpResponseHeadersFilter</filter-name>
  <filter-class>com.thingworx.security.filter.HttpResponseHeadersFilter</filter-class>
  <init-param>
    <param-name>X-Content-Type-Options</param-name>
    <param-value>SET nosniff</param-value>
  </init-param>
  <init-param>
    <param-name>X-XSS-Protection</param-name>
    <param-value>SET mode=block</param-value>
  </init-param>
</filter>
<filter-mapping>
  <filter-name>HttpResponseHeadersFilter</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>

<security-constraint>
  <web-resource-collection>
    <web-resource-name>restricted methods</web-resource-name>
    <url-pattern>/*</url-pattern>
    <http-method>DELETE</http-method>
    <http-method>OPTIONS</http-method>
  </web-resource-collection>
  <auth-constraint />
</security-constraint>
















12.point in excell appsec


<init-param>
  <param-name>Cache-Control</param-name>
  <param-value>SET max-age=86400, public</param-value>
</init-param>


<filter>
  <description>Public resources cache</description>
  <filter-name>PublicResourcesCache</filter-name>
  <filter-class>com.thingworx.security.filter.HttpResponseHeadersFilter</filter-class>
  <init-param>
    <param-name>Cache-Control</param-name>
    <param-value>SET max-age=86400, public</param-value>
  </init-param>
</filter>
<filter-mapping>
  <filter-name>PublicResourcesCache</filter-name>
  <url-pattern>/public/*</url-pattern>
</filter-mapping>
 
<filter>
  <description>Private resources cache</description>
  <filter-name>PrivateResourcesCache</filter-name>
  <filter-class>com.thingworx.security.filter.HttpResponseHeadersFilter</filter-class>
  <init-param>
    <param-name>Cache-Control</param-name>
    <param-value>SET no-store</param-value>
  </init-param>
</filter>
<filter-mapping>
  <filter-name>PrivateResourcesCache</filter-name>
  <url-pattern>/private/*</url-pattern>
</filter-mapping>





***DOTNET COMMAND FOR CLI*******************
to open new console:

dotnet new console --force

#to clean 

dotnet clean project name

#to build 

dotnet build 







gitlab repository path:
/var/opt/gitlab/git-data/repositories/root

Hi,

8388210@testsso.com

Adopt-admin:7190921@testsso.com  
Sbi@12345
Department-admin:2501244@testsso.com
S/w factory users:
testsso\6261892
testsso\6176275
testsso\6717594
testsso\5248124

war backup path on preprod:/usr/local/backupwar

2973618@testsso.com
1944231@testsso.com
2974193@testsso.com
2501244@testsso.com

6261892@testsso.com
6717594@testsso.com
5248124@testsso.com
6176275@testsso.com

1@testsso.com
2@testsso.com
3@testsso.com
4@testsso.com
https://devopsservicespreprod.statebanktimes.in/manager/displayfile/PROJECT_FORTIFY1111.pdf


convert ssl certificate
https://knowledge.digicert.com/solution/SO26449.html
openssl x509 -inform DER -in certnew_der.cer  -out devopsprod.crt

openssl x509 -req -in devops.statebanktimes.in.csr -signkey devops.statebanktimes.in.key -out devops.statebanktimes.in.crt


###PRODUCTION IP AND DOMANIN NAME####
DNS Name=devops.statebanktimes.in
DNS Name=jira.statebanktimes.in
DNS Name=sonarqube.statebanktimes.in
DNS Name=jenkins.statebanktimes.in
DNS Name=jmeter.statebanktimes.in
DNS Name=nexus.statebanktimes.in
DNS Name=gitlab.statebanktimes.in
DNS Name=elkapm.statebanktimes.in
DNS Name=kibana.statebanktimes.in
DNS Name=nagios.statebanktimes.in
DNS Name=gitlab.statebanktimes.in
DNS Name=keycloak.statebanktimes.in
DNS Name=devopsservices.statebanktimes.in
DNS Name=elkcluster.statebanktimes.in
DNS Name=R0ETADVOPSWP001
DNS Name=R0ETADVOPSWP002
DNS Name=R0ETADVOPSAP001
DNS Name=R0ETADVOPSAP002
DNS Name=R0ETADVOPSAP003
DNS Name=R0ETADVOPSAP004
DNS Name=R0ETADVOPSAP005
DNS Name=R0ETADVOPSAP006
DNS Name=R0ETADVOPSAP007
DNS Name=R0ETADVOPSAP008
DNS Name=R0ETADVOPSAP009
DNS Name=R0ETADVOPSAP010
DNS Name=R0ETADVOPSAP011
DNS Name=R0ETADVOPSDP001
DNS Name=R0ETADVOPSDP002
DNS Name=R0ETADVOPSDP003
DNS Name=R0ETADVOPSAP022
DNS Name=R0ETADVOPSAP023
DNS Name=R0ETADVOPSAP024
DNS Name=R0ETADVOPSAP025
DNS Name=R0ETADVOPSAP026
DNS Name=R0ETADVOPSAP027
DNS Name=R0ETADVOPSAP028
DNS Name=R0ETADVOPSAP029
DNS Name=R0ETADVOPSAP030
DNS Name=R0ETADVOPSAP031
DNS Name=R0ETADVOPSWP004
DNS Name=10.191.26.13
DNS Name=10.191.26.14
DNS Name=10.191.26.15
DNS Name=10.191.26.16
DNS Name=10.191.29.13
DNS Name=10.191.29.14
DNS Name=10.191.29.15
DNS Name=10.191.29.16
DNS Name=10.191.29.17
DNS Name=10.191.27.14
DNS Name=10.191.27.15
DNS Name=10.191.27.16
DNS Name=10.191.27.17
DNS Name=10.191.27.18
DNS Name=10.191.27.19
DNS Name=10.191.27.20
DNS Name=10.191.27.21
DNS Name=10.191.27.22
DNS Name=10.191.28.11
DNS Name=10.191.28.12
DNS Name=10.191.28.13
DNS Name=10.191.151.117
DNS Name=10.191.151.118
DNS Name=10.191.151.116
DNS Name=10.191.151.123
DNS Name=10.191.151.119
DNS Name=10.191.218.108
DNS Name=10.191.26.11
DNS Name=10.191.26.12
DNS Name=10.191.29.11
DNS Name=10.191.29.12
DNS Name=10.191.27.11
DNS Name=10.191.27.12
DNS Name=10.191.27.13
DNS Name=10.191.146.41

/var/lib/pgsql/9.6/data

####AWS QUESTION AND ANSWER #####
https://www.interviewbit.com/aws-interview-questions/


SMTP MAIL CONFIGURATION:

jenkins.devops@sbi.co.in
nagios.devops@sbi.co.in
gitlab.devops@sbi.co.in

#####Fortify Configuration#########

Remote root directory:/opt/jenkins/
Host:10.191.148.242, 10.191.148.243
Credentials: root/root123

Environment variables:
Please find below value of PATH variable-
/opt/Fortify/Fortify_SCA_and_Apps_19.1.0/bin:
/opt/SCA-19.10/y/bin:
/opt/Fortify/Fortify_SCA_and_Apps_19.1.0/bin:
/opt/SCA-19.10/y/bin:
/usr/local/sbin:
/usr/local/bin:
/usr/sbin:/usr/bin:
/opt/Maven/apache-maven-3.5.4/bin:
/root/bin

####Tomcat Error handling ############
cd /opt/tomcat/conf/server.xml
<Valve className="org.apache.catalina.valves.ErrorReportValve"
        errorCode.400="webapps/ROOT/error/error.html"
        errorCode.0="webapps/ROOT/error/error.html"
        showReport="false"
        showServerInfo="false" />

Create a html error file in the given location
cd /opt/tomcat/webapps/ROOT/error/error.html

#########APPSEC FOR TOOLS CONFIGURATION###################

cd /opt/tomct/conf/web.xml

<session-config>
        <session-timeout>30</session-timeout>
                <cookie-config>
                        <http-only>true</http-only>
                        <secure>true</secure>
                        <path>/</path>
                </cookie-config>
    </session-config>

Create a file called contex.xml
/opt/tomcat/webapps/devops-portal/META-INF
<Context sessionCookiePath="/devops-portal">
   <CookieProcessor sameSiteCookies="strict" />
</Context>

<title>Dashboard [Jenkins]</title>
/jenkins/static/977c0d83/scripts/yui/datasource/
icon-notepad
/var/cache/jenkins/war/images/24x24/notepad.png
/var/cache/jenkins/war/images/16x16/notepad.png
/var/cache/jenkins/war/images/48x48/notepad.png



/var/cache/jenkins/war/WEB-INF
/var/cache/jenkins/war/images/48x48
***JIRA **HSTS**clickjacking***
https://confluence.atlassian.com/jirakb/how-to-enable-and-configure-http-strict-transport-security-hsts-response-header-on-jira-1047554004.html
<filter>
        <filter-name>httpHeaderSecurity</filter-name>
        <filter-class>org.apache.catalina.filters.HttpHeaderSecurityFilter</filter-class>
<async-supported>true</async-supported>
        <init-param>
            <param-name>hstsEnabled</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>hstsMaxAgeSeconds</param-name>
            <param-value>31536000</param-value>
        </init-param>
        <init-param>
            <param-name>antiClickJackingOption</param-name>
            <param-value>SAMEORIGIN</param-value>
        </init-param>
    </filter>
<filter>
        <filter-name>httpHeaderSecurity</filter-name>
        <filter-class>org.apache.catalina.filters.HttpHeaderSecurityFilter</filter-class>
<async-supported>true</async-supported>
        <init-param>
            <param-name>hstsEnabled</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>hstsMaxAgeSeconds</param-name>
            <param-value>31536000</param-value>
        </init-param>
        <init-param>
            <param-name>antiClickJackingOption</param-name>
            <param-value>ALLOW-FROM</param-value>
        </init-param>
        <init-param>
          <param-name>antiClickJackingUri</param-name>
          <param-value>https://jira.statebanktimes.in/jira/*</param-value>
        </init-param>
    </filter>
<filter-mapping>
        <filter-name>security</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher> <!-- we want security to be applied after urlrewrites, for example -->
    </filter-mapping>
<filter-mapping>
        <filter-name>httpHeaderSecurity</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping>
frame-src 'self' * ; frame-ancestors 'self' * ; object-src 'none';
frame-src 'self'  https://devopspprod.statebanktimes.in/
***********Improper error handling in jira and remove banner from jira*************
step1:
got to below directory create one html file
/opt/atlassian/jira/atlassian-jira/500.html
System encountered error, please contact your administrator (Nilesh Rane)
step2:
/opt/atlassian/jira/atlassian-jira/WEB-INF/web.xml
 <error-page>
        <error-code>404</error-code>
        <location>/500.html</location>
    </error-page>

    <error-page>
        <error-code>403</error-code>
        <location>/500.html</location>
    </error-page>

    <error-page>
        <error-code>401</error-code>
        <location>/500.html</location>
    </error-page>

    <error-page>
        <error-code>500</error-code>
        <location>/500.html</location>
    </error-page>
 <error-page>
        <error-code>503</error-code>
        <location>/500.html</location>
    </error-page>

/opt/atlassian/jira/atlassian-jira/WEB-INF/classes/templates/plugins/footer/footer.vm
/opt/atlassian/jira/atlassian-jira/WEB-INF/classes/templates/email/html/includes/footer.vm
/opt/atlassian/jira/atlassian-jira/WEB-INF/classes/templates/email/text/includes/footer.vm
remove span in .vm
<span></sapn>

https://devopspprod.statebanktimes.in/jira/plugins/servlet/oidc/auth
**************************
SonarQube login page:
go to /opt/sonarqube/web/index.html
add below script
<script>
if(window.location.pathname==='/sonar/sessions/new') window.location.href="https://devopspprod.statebanktimes.in/sonar/sessions/init/saml?return_to=/sonar/";
</script>
********Improper error handling in sonarqube************
step1:
/opt/sonarqube/web/WEB-INF
<error-page>
    <error-code>403</error-code>
    <location>/error.html</location>
</error-page>


<error-page>
    <error-code>404</error-code>
    <location>/error.html</location>
</error-page>


<error-page>
    <error-code>500</error-code>
    <location>/error.html</location>
</error-page>


<error-page>
    <error-code>503</error-code>
    <location>/error.html</location>
</error-page>

step2:
/opt/sonarqube/web/error.html
contact your administrator

tools version showing in response headers.
sonarqube
jira-> jira version can be seeing in metatab.

**removr arbitary methos in sonarqube

RewriteEngine On
RewriteCond %{REQUEST_METHOD} ^(OPTIONS|PUT|HEAD|DELETE)
RewriteRule .* - [F]

jenkins add description
document.getElementById("description-link").parentNode.remove();
document.getElementById("description").remove();

add in server.xml tomcat 9
<Valve className="org.apache.catalina.valves.ErrorReportValve"
        errorCode.400="webapps/ROOT/error/error.html"
        errorCode.0="webapps/ROOT/error/error.html"
        showReport="false"
        showServerInfo="false" />



###Modsecurity issur####
https://geekflare.com/apache-web-server-hardening-security/

IMPORT COMMANDS
 068  vim /etc/yum.repos.d/rhel7_9.repo
 1069  yum install gitlab-ce-11.6.0-ce.0.el7.x86_64.rpm
 1070  yum repolist
 1071  vim /etc/yum.repos.d/rhel7_9.repo
 1072  yum install gitlab-ce-11.6.0-ce.0.el7.x86_64.rpm
 1073  yum clean all
 1074  yum repolist all
 1075  yum install gitlab-ce-11.6.0-ce.0.el7.x86_64.rpm
 1076  ip r
 1077  rpm -qa |grep  gitlab-ce-11.6*
 1078  rpm -e gitlab-ce-11.6.0-ce.0.el7.x86_64.rpm
 1079  rpm -e --allmatches gitlab-ce-11.6.0-ce.0.el7.x86_64.rpm
 1080  rpm -qa |grep  gitlab-ce*
 1081  cd /tmp/
 1082  ll
 1083  rpm -e gitlab-ce-11.6.0-ce.0.el7.x86_64.rpm
 1084  cd /etc/
 1085  ll
 1086  ls -ltr
 1087  cd /var/lib/
 1088  ll
 1089  cd dpkg
 1090  cd /dpkg/info
 1091  cd /dpkg
 1092  ll *dp*
 1093  ls -ltr
 1094  hostory
 1095  history



####INSTALLATION OF POSTGRESQL DATABASE 12 #########
https://computingforgeeks.com/how-to-install-postgresql-12-on-centos-7/
https://www.postgresql.org/download/linux/redhat/
sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
sudo yum install -y postgresql12-server
sudo /usr/pgsql-12/bin/postgresql-12-setup initdb
sudo systemctl enable postgresql-12
sudo systemctl start postgresql-12



postgresql-setup --initdb
systemctl enable postgresql.service
systemctl start postgresql.service


sudo yum -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
rpm -qi pgdg-redhat-repo

RESET THE PASSWORD
http://www.orbital.co.ke:8080/opengeo-docs/dataadmin/pgGettingStarted/firstconnect.html

sudo -u postgres psql postgres
\password postgres
\q


http://makeseleniumeasy.com/2020/03/23/how-to-run-install-jenkins-on-apache-tomcat-server/

#############GITHUB#################DEMO LAB
[12:33] Murugesan U
1. https://lab.github.com/githubtraining/introduction-to-github
2. https://lab.github.com/githubtraining/uploading-your-project-to-github
3.https://lab.github.com/githubtraining/migrating-your-repository-to-github
4.https://lab.github.com/githubtraining/reviewing-pull-requests
5.https://lab.github.com/githubtraining/managing-merge-conflicts
6.https://lab.github.com/githubtraining/connect-the-dots-in-a-github-repository
7.https://lab.github.com/githubtraining/create-a-release-based-workflow
8.https://lab.github.com/githubtraining/communicating-using-markdown
Introduction to GitHub | GitHub Learning LabIf you are looking for a quick and fun introduction to GitHub, you've found it. This class will get you started using GitHub in less than an hour.lab.github.com








