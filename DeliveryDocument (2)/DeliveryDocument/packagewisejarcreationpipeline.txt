import java.text.SimpleDateFormat;
import org.apache.commons.codec.digest.DigestUtils;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
def startDate
def endDate
def fileContents
def md5
def projectId= "103"
def projectName= "EbankingWeb"
def moduleId= "82"
def moduleName= "End to end automation of complaint resolution"
def newBuildId= "3.0.0.${BUILD_ID}"
def sonarUrl= "https://sonarqube.statebanktimes.in/sonar"
def tomcatCredIdForJenkins= "tomcat"
def remote= [:]  
remote.name = "node"
remote.host = "10.191.27.19"
remote.allowAnyHosts = true
def tomcatServer= "https://devopsservices.statebanktimes.in"
def scannerHome

def CODE =  readJSON text: '{"url":"https://gitlab.statebanktimes.in/gitlab/root/ebankingweb.git","scm":"gitlab","branch":"master","credId":"gitlab"}'
def UNITTEST =  readJSON text: '{"command":"mvn test"}'
def BUILD =  readJSON text: '{"command":"mvn package"}'
def ANALYSIS =  readJSON text: '{"sonarkey":"ebankingweb"}'
def BINARY =  readJSON text: '{"url":"https://nexus.statebanktimes.in"}'
def DEPLOYMENT =  readJSON text: '{"contextPath":"EbankingWeb"}'

pipeline {
agent any
//environment{
//IMAGE= readMavenPom().getArtifactId()
//}
options {
skipDefaultCheckout()
 }
stages {

stage('CODE'){
       steps{
cleanWs()
       script{
buildName newBuildId
}
           git url: CODE.url, credentialsId: CODE.credId, branch: CODE.branch
       }

}
stage('UNIT-TEST'){
     steps{
           println "Test code ..."
          executeCmd("/opt/apache-maven-3.6.3/bin/"+UNITTEST.command);
        }
}
stage('Build'){
      steps{
      script{
      startDate = new Date()
      }
      println "Building code ...."
     
      withEnv(["JAVA_HOME=${tool 'JAVA7_HOME'}", "PATH=${tool 'JAVA7_HOME'}/bin:${env.PATH}"]) {
      sh 'java -version'
                sh 'javac -version'
                sh "git log -m -1 --name-only -n 1 | tail -n +7 | rev | cut -d'/' -f 2- | rev | uniq > module.csv"
                script{def filePath = readFile('module.csv').trim()
                    def lines = filePath.readLines()
                     sh ("mkdir sonar")
                    lines.each { module ->
                        sh("javac -classpath 'WebContent/WEB-INF/lib/*' ${module}/*.java && jar cvf target/"+module.replaceAll('/','.')+".jar ${module}/*.class")
                        sh ("cp ${module}/*.class ./sonar")
                        sh ("cp ${module}/*.java ./sonar")
                    }
                sh "tar -cvzf target/${projectName}.${newBuildId}.tar target/*.jar"
             
}
         
}
     
}
  post{
  always{
  script{
    fileContents = "/var/lib/jenkins/workspace/${JOB_NAME}/target/${projectName}.${newBuildId}.tar"
        def hashValue= sh ([script:"md5sum < '${fileContents}'",returnStdout:true]).toString().trim()
           echo  hashValue

  endDate = new Date()
        adoptBuildFeedback buildDisplayName: "${projectName}.${newBuildId}",
    buildEndedAt: "${endDate}",
    buildStartedAt: "${startDate}",
    buildUrl: "${BUILD_URL}",
      projectId: projectId,
        status: "${currentBuild.currentResult}",
        buildHashValue: hashValue        
  }
  }
 
  }
}
stage('SonarQube analysis') {
   steps{
       script{
           scannerHome = tool 'sonarscanner';
       }
       withSonarQubeEnv('SonarQube') {
            // script{def filePath = readFile('module.csv').trim()
            //         def lines = filePath.readLines()
            //         lines.each { module ->
            //             sh "${scannerHome}/bin/sonar-scanner -Dsonar.java.binaries=${module} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.projectKey="+ANALYSIS.sonarkey+" -Dsonar.projectName="+ANALYSIS.sonarkey
                       
            //         }
      sh "${scannerHome}/bin/sonar-scanner -Dsonar.java.binaries=./sonar/ -Dsonar.sources=./sonar/ -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.projectKey="+ANALYSIS.sonarkey+" -Dsonar.projectName="+ANALYSIS.sonarkey
    }
   }
  }
// stage('SonarQube analysis') {
// steps {
// println "Building code ..."
// withSonarQubeEnv('SonarQube') {
// executeCmd("/opt/apache-maven-3.6.3/bin/mvn sonar:sonar"+" "+"-Dsonar.host.url="+ sonarUrl +" "+"-Dsonar.projectKey="+ANALYSIS.sonarkey+" "+"-Dsonar.projectName="+ANALYSIS.sonarkey);
// }
// executeCmd("sleep 10")
// timeout(time: 3, unit: 'HOURS') {
// waitForQualityGate abortPipeline: true
// }
// }
// post{
//   success{
//   script{
// adoptCodeAnalysisFeedback  buildDisplayName: "${projectName}.${newBuildId}",
// buildUrl: "${BUILD_URL}",
// sonarKey: "${ANALYSIS.sonarkey}",
// projectId: "${projectId}"
//   }
//   }
// }
//   }
 
stage('Binary Management'){
      steps{
            println "Uploading packaged code ..."
            script{
withCredentials([usernamePassword(credentialsId: 'nexus_admin', passwordVariable: 'password', usernameVariable: 'username')]) {
sh "curl -v -u ${username}:${password} --upload-file  target/${projectName}.${newBuildId}.tar '${BINARY.url}/repository/jenkins_rel/${moduleName.replaceAll("\\s+","-")}/${projectName}/${projectName}.${newBuildId}.tar'"
}
 }
           
}
}
/*stage('Deployment'){
            steps{              
                  script {

    withCredentials([usernamePassword(credentialsId: 'Ansible_SSH', passwordVariable: 'password', usernameVariable: 'userName')]) {
        remote.user = userName
        remote.password = password
            sshCommand remote: remote, command: 'hostname'
sh "wget ${BINARY.url}/repository/jenkins_rel/${moduleName.replaceAll("\\s+","-")}/${projectName}/${projectName}.${newBuildId}.tar"
sh "scp /var/lib/jenkins/workspace/ITFOBEPROGRAM_ENDTOENDAUTOMATIONOFCOMPLAINTRESOLUTION_EBANKINGWEB/target/${projectName}.${newBuildId}.tar ansible@10.191.27.19:/home/ansible/yonoappjar"
sshCommand remote: remote, command: "ansible-playbook /opt/ansible/playbooks/devops/yonojarapp.yml --extra-vars 'newBuildId=${newBuildId}'  -i /opt/ansible/inventories/devops "

    }  
      }
   }    
    post{
               always{
script{
  startDate = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(new Date())
                                        adoptDevDeploymentFeedback buildDisplayName: "${projectName}.${newBuildId}",
                                        deploymentStartedAt: "${startDate}",
                                        environment: "DEV",
                                        moduleId: moduleId,
                                        moduleName: "${moduleName}",
                                        projectName: "${projectName}",
                                        status: "${currentBuild.currentResult}"

}
}
                 
           }                
}*/
/*stage('Performance Testing'){
                  steps{
                       
                  sh '/opt/apache-jmeter-5.4/bin/jmeter -Jjmeter.save.saveservice.output_format=xml -n -t /opt/apache-jmeter-5.4/bin/BeanShellSampler.jmx -l /home/jmeter_report/TestResult1.jtl'
  perfReport filterRegex: '', sourceDataFiles: '/home/jmeter_report/TestResult1.jtl'
           }
}*/
}

}

//Helper Methods

void executeCmd(String CMD){
if(isUnix()){
sh "echo linux"
sh CMD
}
else{
bat "echo windows"
bat CMD
}
}